# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")

declare_args() {
  guest_display = "scenic"
}

# Defines a guest package.
#
# Parameters
#   zircon (string, optional)
#     Path to the Zircon kernel. Either "zircon" or "linux" must be specified.
#   linux (string, optional)
#     Path to the Linux kernel. Either "zircon" or "linux" must be specified.
#   ramdisk (string, optional)
#     Path to a ramdisk file to be loaded into the guest.
#   cmdline (string, optional)
#     Kernel cmdline string.
#   block_devices (array, optional)
#     List of block devices to use.
#
template("guest_app") {
  assert(defined(invoker.zircon) || defined(invoker.linux), "")

  guest_config_target_name = "${target_name}_guest_config"
  guest_config_file = "${target_out_dir}/guest.cfg"

  action(guest_config_target_name) {
    script = "//garnet/bin/guest/generate_guest_config.py"
    outputs = [
      guest_config_file,
    ]

    args = []
    if (defined(invoker.zircon)) {
      args += [
        "--zircon",
        "/pkg/data/kernel",
      ]
    }
    if (defined(invoker.linux)) {
      args += [
        "--linux",
        "/pkg/data/kernel",
      ]
    }
    if (defined(invoker.ramdisk)) {
      args += [
        "--ramdisk",
        "/pkg/data/ramdisk",
      ]
    }
    if (defined(invoker.cmdline)) {
      args += [
        "--cmdline",
        invoker.cmdline,
      ]
    }
    if (defined(invoker.block_devices)) {
      foreach(block_spec, invoker.block_devices) {
        args += [
          "--block",
          block_spec,
        ]
      }
    }
    args += [
      "--display",
      guest_display,
      rebase_path("$guest_config_file"),
    ]
  }

  package(target_name) {
    deps = [
      ":${guest_config_target_name}",
      "//garnet/bin/guest:bin",
    ]
    inputs = []

    if (defined(invoker.deps)) {
      deps += invoker.deps
    }

    binary = "guest"

    meta = [
      {
        path = rebase_path("//garnet/bin/guest/meta/sandbox")
        dest = "sandbox"
      },
    ]

    if (target_cpu == "arm64") {
      resources = [
        {
          path = rebase_path("//garnet/lib/machina/arch/arm64/dts/board.dtb")
          dest = "board.dtb"
        },
      ]
    } else if (current_cpu == "x64") {
      resources = [
        {
          path = rebase_path("//garnet/lib/machina/arch/x86/asl/dsdt.aml")
          dest = "dsdt.aml"
        },
        {
          path = rebase_path("//garnet/lib/machina/arch/x86/asl/mcfg.aml")
          dest = "mcfg.aml"
        },
      ]
    }

    # Add kernel resource.
    if (defined(invoker.zircon)) {
      kernel = rebase_path(invoker.zircon)
      inputs += [ kernel ]
      resources += [
        {
          path = kernel
          dest = "kernel"
        },
      ]
    }
    if (defined(invoker.linux)) {
      kernel = rebase_path(invoker.linux)
      inputs += [ kernel ]
      resources += [
        {
          path = kernel
          dest = "kernel"
        },
      ]
    }

    # Add ramdisk resource.
    if (defined(invoker.ramdisk)) {
      ramdisk = rebase_path(invoker.ramdisk)
      inputs += [ ramdisk ]
      resources += [
        {
          path = ramdisk
          dest = "ramdisk"
        },
      ]
    }

    resources += [
      {
        path = rebase_path(guest_config_file)
        dest = "guest.cfg"
      },
    ]

    # Pass-through any additional resources.
    if (defined(invoker.resources)) {
      resources += invoker.resources
    }
  }
}
