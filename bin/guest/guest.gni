# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")

# Defines a guest package.
#
# Parameters
#   kernel (string, optional)
#     Path to the guest kernel.
#   ramdisk (string, optional)
#     Path to a ramdisk file to be loaded into the guest.
#   cmdline (string, optional)
#     Kernel cmdline string.
#   block_devices (array, optional)
#     List of block devices to use.
#
template("guest_app") {
  if (defined(invoker.cli) && invoker.cli) {
    assert(!defined(invoker.kernel) && !defined(invoker.ramdisk), "")
  }
  package(target_name) {
    deps = [
      "//garnet/bin/guest:bin",
    ]
    inputs = []

    if (defined(invoker.deps)) {
      deps += invoker.deps
    }

    binary = "guest"

    meta = [ {
          path = rebase_path("//garnet/bin/guest/meta/sandbox")
          dest = "sandbox"
        } ]

    if (target_cpu == "arm64") {
      resources = [ {
            path = rebase_path("//garnet/lib/machina/arch/arm64/dts/board.dtb")
            dest = "board.dtb"
          } ]
    } else if (current_cpu == "x64") {
      resources = [
        {
          path = rebase_path("//garnet/lib/machina/arch/x86/asl/dsdt.aml")
          dest = "dsdt.aml"
        },
        {
          path = rebase_path("//garnet/lib/machina/arch/x86/asl/mcfg.aml")
          dest = "mcfg.aml"
        },
      ]
    }

    # Add kernel resource.
    if (defined(invoker.kernel)) {
      kernel = rebase_path(invoker.kernel)
      inputs += [ kernel ]
      resources += [ {
            path = kernel
            dest = "kernel"
          } ]
    }

    # Add ramdisk resource.
    if (defined(invoker.ramdisk)) {
      ramdisk = rebase_path(invoker.ramdisk)
      inputs += [ ramdisk ]
      resources += [ {
            path = ramdisk
            dest = "ramdisk"
          } ]
    }

    config_args = []
    if (defined(invoker.cmdline)) {
      config_args += [
        "--cmdline",
        invoker.cmdline,
      ]
    }

    if (defined(invoker.block_devices)) {
      foreach(block_spec, invoker.block_devices) {
        config_args += [
          "--block",
          block_spec,
        ]
      }
    }

    # Add config file resource.
    guest_config_file = "${target_out_dir}/guest.cfg"
    guest_config = exec_script("//garnet/bin/guest/generate_guest_config.py",
                               config_args,
                               "string")
    write_file(guest_config_file, guest_config)
    resources += [ {
          path = rebase_path(guest_config_file)
          dest = "guest.cfg"
        } ]

    # Pass-through any additional resources.
    if (defined(invoker.resources)) {
      resources += invoker.resources
    }
  }
}
