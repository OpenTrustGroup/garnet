# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//garnet/bin/guest/pkg/guest_package.gni")

declare_args() {
  # By default we bundle a ready-only root filesystem as a package resource.
  # This is simple but can be undesirable for if booting using a bootfs or
  # netbooting (as these images will be stored in RAM).
  #
  # If set to true, a USB drive should be formatted using |build-usb.sh| and
  # inserted in the target device prior to launching a debian-guest.
  debian_guest_usb_root = false

  # Package the rootfs as a QCOW image (as opposed to a flat file).
  #
  # This argument has no effect if |debain_guest_usb_root| is true.
  debian_guest_qcow = true
}

if (target_cpu == "x64") {
  image_dir = "debian-x86"
  arch_cmdline = "earlycon=uart,io,0x3f8"
  if (debian_guest_usb_root) {
    # Standard x86-64 Linux Root GPT GUID
    partition_guid = "4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709"
  }
} else if (target_cpu == "arm64") {
  image_dir = "debian-arm64"
  arch_cmdline = "earlycon=pl011,0xfff32000"
  if (debian_guest_usb_root) {
    # Standard aarch64 Linux Root GPT GUID
    partition_guid = "B921B045-1DF0-41C3-AF44-4C6F280D3FAE"
  }
} else {
  panic("Unsupported architecture ${target_cpu}")
}

guest_package("debian_guest") {
  cmdline = "${arch_cmdline} root=/dev/vda rw"
  linux = "${image_dir}/vmlinuz"
  ramdisk = "${image_dir}/initrd.img"

  if (debian_guest_usb_root) {
    block_devices = [ "type-guid:${partition_guid},rw,fdio" ]
  } else {
    disk_name = "filesystem.img"
    if (debian_guest_qcow) {
      disk_path = rebase_path("${image_dir}/rootfs.qcow2")
      disk_options = "ro,qcow,volatile"
    } else {
      disk_path = rebase_path("${image_dir}/rootfs.img")
      disk_options = "ro,volatile"
    }
    resources = [
      {
        path = disk_path
        dest = disk_name
      },
    ]
    block_devices = [ "/guest/data/${disk_name},${disk_options}" ]
  }
}
