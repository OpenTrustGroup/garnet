// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef GARNET_BIN_MEDIA_MEDIA_PLAYER_FRAMEWORK_FORMATTING_H_
#define GARNET_BIN_MEDIA_MEDIA_PLAYER_FRAMEWORK_FORMATTING_H_

#include <ostream>

#include "garnet/bin/media/media_player/framework/models/demand.h"
#include "garnet/bin/media/media_player/framework/packet.h"
#include "garnet/bin/media/media_player/framework/result.h"
#include "garnet/bin/media/media_player/framework/types/audio_stream_type.h"
#include "garnet/bin/media/media_player/framework/types/stream_type.h"
#include "garnet/bin/media/media_player/framework/types/video_stream_type.h"
#include "lib/media/timeline/timeline_function.h"

//
// This file declares a bunch of << operator overloads for dumping media stuff.
// Unless you want to add new operators, it's sufficient to know that you can
// just use the operators as expected, except that some of the overloads can
// produce multiple lines and therefore provide their own newlines.
//
// These operators are intended to be called after a label has been added to
// the stream with a trailing space. If the text generated by an operator is
// sufficiently short, the operator may add that text with no preamble and
// terminate it with "\n". If the text has to be multiline, the operator
// first adds "\n", then the multiline text with "\n" termination.
// Each line starts with begl in order to apply the appropriate indentation.
// The Indenter class is provided to adjust the identation level. Operators
// that take pointers need to handle nullptr.
//

namespace media_player {

int ostream_indent_index();

std::ostream& begl(std::ostream& os);

inline std::ostream& indent(std::ostream& os) {
  ++os.iword(ostream_indent_index());
  return os;
}

inline std::ostream& outdent(std::ostream& os) {
  --os.iword(ostream_indent_index());
  return os;
}

// The following overloads don't add newlines.

std::ostream& operator<<(std::ostream& os, Result value);
std::ostream& operator<<(std::ostream& os, const PacketPtr& value);
std::ostream& operator<<(std::ostream& os, StreamType::Medium value);
std::ostream& operator<<(std::ostream& os, AudioStreamType::SampleFormat value);
std::ostream& operator<<(std::ostream& os, VideoStreamType::VideoProfile value);
std::ostream& operator<<(std::ostream& os, VideoStreamType::PixelFormat value);
std::ostream& operator<<(std::ostream& os, VideoStreamType::ColorSpace value);
std::ostream& operator<<(std::ostream& os, const std::unique_ptr<Bytes>& value);
std::ostream& operator<<(std::ostream& os, media::TimelineRate value);
std::ostream& operator<<(std::ostream& os, media::TimelineFunction value);

template <typename T>
std::ostream& operator<<(std::ostream& os, Range<T> value) {
  return os << value.min << ".." << value.max;
}

std::ostream& operator<<(std::ostream& os, Range<bool> value);

// The following overloads add newlines.

std::ostream& operator<<(std::ostream& os,
                         const std::unique_ptr<StreamType>& value);
std::ostream& operator<<(std::ostream& os, const StreamType& value);
std::ostream& operator<<(std::ostream& os,
                         const std::unique_ptr<StreamTypeSet>& value);
std::ostream& operator<<(std::ostream& os, const StreamTypeSet& value);
std::ostream& operator<<(
    std::ostream& os,
    const std::unique_ptr<std::vector<std::unique_ptr<StreamType>>>& value);
std::ostream& operator<<(
    std::ostream& os,
    const std::unique_ptr<std::vector<std::unique_ptr<StreamTypeSet>>>& value);

template <typename T>
std::ostream& operator<<(std::ostream& os, const std::vector<T>& value) {
  if (value.size() == 0) {
    return os << "<empty>\n";
  } else {
    os << "\n";
  }

  int index = 0;
  for (const T& element : value) {
    os << begl << "[" << index++ << "] " << element;
  }

  return os;
}

template <typename T>
struct AsInlineVector {
  explicit AsInlineVector(const std::vector<T>& value) : value_(value) {}
  const std::vector<T>& value_;
};

template <typename T>
std::ostream& operator<<(std::ostream& os, AsInlineVector<T> value) {
  if (value.value_.size() == 0) {
    return os << "<empty>";
  }

  for (T& element : const_cast<std::vector<T>&>(value.value_)) {
    os << element << ' ';
  }

  return os;
}

}  // namespace media_player

namespace media_player {

// The following overloads don't add newlines.

std::ostream& operator<<(std::ostream& os, Demand value);

}  // namespace media_player

#endif  // GARNET_BIN_MEDIA_MEDIA_PLAYER_FRAMEWORK_FORMATTING_H_
