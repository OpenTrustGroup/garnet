# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")

executable("bin") {
  output_name = "trace"

  sources = [
    "main.cc",
  ]

  deps = [
    ":trace_app",
  ]
}

source_set("trace_app") {
  sources = [
    "app.cc",
    "app.h",
    "command.cc",
    "command.h",
    "commands/list_categories.cc",
    "commands/list_categories.h",
    "commands/record.cc",
    "commands/record.h",
    "results_export.cc",
    "results_export.h",
    "results_output.cc",
    "results_output.h",
    "spec.cc",
    "spec.h",
    "tracer.cc",
    "tracer.h",
  ]

  public_deps = [
    "//garnet/lib/measure",
    "//garnet/lib/trace_converters:chromium",
    "//garnet/public/lib/component/cpp",
    "//garnet/public/lib/fsl",
    "//garnet/public/lib/fxl",
    "//garnet/public/fidl/fuchsia.tracing",
    "//zircon/public/lib/async-loop-cpp",
    "//zircon/public/lib/fdio",
    "//zircon/public/lib/fit",
    "//zircon/public/lib/trace-reader",
  ]

  deps = [
    "//third_party/rapidjson",
  ]
}

source_set("unittests") {
  testonly = true

  sources = [
    "spec_unittest.cc",
  ]

  deps = [
    ":trace_app",
    "//garnet/public/lib/fxl",
    "//third_party/googletest:gtest",
  ]
}

package("trace") {
  deprecated_system_image = true

  deps = [
    ":bin",
  ]

  binaries = [
    {
      name = "trace"
    },
  ]

  # If your build includes the target trace tool, your $host_tools_dir
  # contains the utilities to work with traces copied from the target.
  data_deps = [
    "//garnet/bin/traceutil",
  ]
}

executable("trace_tests_bin") {
  testonly = true

  output_name = "trace_tests"

  deps = [
    "//garnet/bin/trace:unittests",
    "//garnet/lib/measure:unittests",
    "//third_party/googletest:gtest_main",
  ]
}

source_set("run_test") {
  testonly = true

  sources = [
    "tests/run_test.cc",
    "tests/run_test.h",
  ]

  public_deps = [
    "//garnet/public/lib/fxl",
    "//zircon/public/lib/fdio",
    "//zircon/public/lib/zx",
  ]
}

executable("trace_integration_tests") {
  testonly = true
  output_name = "trace_integration_tests"

  sources = [
    "tests/trace_integration_tests.cc",
  ]

  deps = [
    ":run_test",
    "//third_party/googletest:gtest",
  ]
}

executable("run_integration_test") {
  testonly = true
  output_name = "run_integration_test"

  sources = [
    "tests/run_integration_test.cc",
  ]

  deps = [
    ":run_test",
  ]
}

executable("integration_test_app") {
  testonly = true
  output_name = "integration_test_app"

  sources = [
    "spec.cc",
    "spec.h",
    "tests/integration_test_app.cc",
  ]

  deps = [
    "//garnet/lib/measure",
    "//garnet/public/lib/fxl",
    "//third_party/rapidjson",
    "//zircon/public/lib/async-loop-cpp",
    "//zircon/public/lib/trace",
    "//zircon/public/lib/trace-provider",
    "//zircon/public/lib/zx",
  ]
}

package("trace_tests") {
  testonly = true

  deps = [
    ":trace_tests_bin",
    ":trace_integration_tests",
    ":run_integration_test",
    ":integration_test_app",
  ]

  tests = [
    {
      name = "trace_tests"
    },
    {
      name = "trace_integration_tests"
    },
  ]

  meta = [
    {
      path = rebase_path("meta/trace_integration_tests.cmx")
      dest = "trace_integration_tests.cmx"
    },
    {
      path = rebase_path("meta/run_integration_test.cmx")
      dest = "run_integration_test.cmx"
    },
    {
      path = rebase_path("meta/integration_test_app.cmx")
      dest = "integration_test_app.cmx"
    },
  ]

  resources = [
    {
      path = rebase_path("${root_build_dir}/run_integration_test")
      dest = "run_integration_test"
    },
    {
      path = rebase_path("${root_build_dir}/integration_test_app")
      dest = "integration_test_app"
    },
    {
      path = rebase_path("tests/oneshot.tspec")
      dest = "oneshot.tspec"
    },
    {
      path = rebase_path("tests/circular.tspec")
      dest = "circular.tspec"
    },
    {
      path = rebase_path("tests/streaming.tspec")
      dest = "streaming.tspec"
    },
  ]
}
