# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/go/go_binary.gni")
import("//build/go/go_test.gni")
import("//build/go/toolchain.gni")
import("//build/package.gni")

# These go dependencies are common to wlanstack and wlanstack_test
wlan_go_dependencies = [
  {
    package = "wlanstack"
    source = "wlanstack"
  },
  {
    package = "wlan/wlan"
    source = "wlan"
  },
  {
    package = "wlan/keywrap"
    source = "keywrap"
  },
  {
    package = "wlan/eapol"
    source = "eapol"
  },
  {
    package = "netstack/link/eth"
    source = "//garnet/go/src/netstack/link/eth"
  },
  {
    package = "github.com/google/netstack"
    source = "//third_party/netstack"
  },
  {
    package = "netstack/watcher"
    source = "//garnet/go/src/netstack/watcher"
  },
  {
    package = "netstack/trace"
    source = "//garnet/go/src/netstack/trace"
  },
  {
    source = "//third_party/golang/crypto"
    package = "golang.org/x/crypto"
  },
]

wlan_gn_deps = [
  "//garnet/public/lib/app/fidl($go_toolchain)",
  "//garnet/public/lib/netstack/fidl($go_toolchain)",
  "//garnet/public/lib/wlan/fidl:service($go_toolchain)",
  "//garnet/public/lib/app/go/src/app",
  "//garnet/public/lib/fidl/go/src/fidl/bindings",
]

go_test("keywrap_test_bin") {
  output_name = "keywrap_test"
  gopackage = "wlan/keywrap"

  # TODO(hahnr): This program has a smaller dependency set in practice, its go_dependencies list
  # should be updated to match the code.
  go_dependencies = wlan_go_dependencies

  extra_dependencies = wlan_gn_deps
}

go_test("elements_test_bin") {
  output_name = "elements_test"
  gopackage = "wlan/wlan/elements"
  go_dependencies = [
    {
      package = "wlan/wlan/elements"
      source = "wlan/elements"
    },
  ]
}

go_test("eapol_handshake_test_bin") {
  output_name = "eapol_handshake_test"
  gopackage = "wlan/eapol/handshake"
  go_dependencies = [
    {
      package = "wlan/wlan"
      source = "wlan"
    },
    {
      package = "wlan/eapol"
      source = "eapol"
    },
    {
      package = "wlan/keywrap"
      source = "keywrap"
    },
    {
      source = "//third_party/golang/crypto"
      package = "golang.org/x/crypto"
    },
  ]

  extra_dependencies = wlan_gn_deps
  extra_dependencies += [ "//garnet/public/lib/wlan/fidl:mlme($go_toolchain)" ]
}

go_test("eapol_crypto_test_bin") {
  output_name = "eapol_crypto_test"
  gopackage = "wlan/eapol/crypto"
  go_dependencies = [
    {
      package = "wlan/eapol/crypto"
      source = "eapol/crypto"
    },
    {
      source = "//third_party/golang/crypto"
      package = "golang.org/x/crypto"
    },
  ]
}

go_binary("wlanstack_bin") {
  output_name = "wlanstack"
  gopackage = "wlanstack"
  go_dependencies = wlan_go_dependencies
  extra_dependencies = wlan_gn_deps
  extra_dependencies += [
    "//garnet/public/lib/netstack/fidl($go_toolchain)",
    "//garnet/public/lib/wlan/fidl:service($go_toolchain)",
    "//garnet/public/lib/wlan/fidl:mlme($go_toolchain)",
  ]
}

go_binary("wlantool_bin") {
  output_name = "wlan"
  gopackage = "wlantool"
  go_dependencies = [
    {
      package = "wlantool"
      source = "wlantool"
    },
  ]
  extra_dependencies = [
    "//garnet/public/lib/app/fidl($go_toolchain)",
    "//garnet/public/lib/netstack/fidl($go_toolchain)",
    "//garnet/public/lib/wlan/fidl:service($go_toolchain)",
    "//garnet/public/lib/app/go/src/app",
    "//garnet/public/lib/fidl/go/src/fidl/bindings",
  ]
}

go_test("wlanstack_test_bin") {
  output_name = "wlanstack_test"
  gopackage = "wlan/wlan"
  go_dependencies = wlan_go_dependencies
  extra_dependencies = wlan_gn_deps
  extra_dependencies += [
    "//garnet/public/lib/netstack/fidl($go_toolchain)",
    "//garnet/public/lib/wlan/fidl:mlme($go_toolchain)",
  ]
}

package("wlanstack") {
  deps = [
    ":wlanstack_bin",
  ]

  binary = "wlanstack"

  meta = [
    {
      path = rebase_path("wlanstack/meta/wlanstack.cmx")
      dest = "wlanstack.cmx"
    },
    {
      path = rebase_path("//garnet/bin/appmgr/legacy_flat_exported_dir")
      dest = "legacy_flat_exported_dir"
    },
  ]

  resources = [
    {
      path = rebase_path("default.json")
      dest = "config.json"
    },
    {
      path = rebase_path("ap.json")
      dest = "ap_config.json"
    },
  ]
}

package("wlantool") {
  deprecated_system_image = true

  deps = [
    ":wlantool_bin",
  ]

  binaries = [
    {
      name = "wlan"
    },
  ]
}

package("wlanstack_test") {
  deprecated_system_image = true

  deps = [
    ":eapol_crypto_test_bin",
    ":eapol_handshake_test_bin",
    ":elements_test_bin",
    ":keywrap_test_bin",
    ":wlanstack_test_bin",
  ]

  tests = [
    {
      name = "elements_test"
    },
    {
      name = "eapol_crypto_test"
    },
    {
      name = "eapol_handshake_test"
    },
    {
      name = "wlanstack_test"
    },
    {
      name = "keywrap_test"
    },
  ]
}
