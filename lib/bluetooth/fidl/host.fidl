// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.bluetooth.host;

using fuchsia.bluetooth;
using fuchsia.bluetooth.control;
using fuchsia.bluetooth.gatt;
using fuchsia.bluetooth.le;

// Interface for interacting with a Bluetooth host device (bt-host)
interface Host {
  // The following methods fulfill a given interface request. bt-host device
  // will start processing FIDL messages. If the request cannot be fulfilled,
  // the bt-host device will close its end of the given channel.
  1: RequestLowEnergyCentral(request<fuchsia.bluetooth.le.Central> central);
  2: RequestLowEnergyPeripheral(request<fuchsia.bluetooth.le.Peripheral> peripheral);
  3: RequestGattServer(request<fuchsia.bluetooth.gatt.Server> server);

  // Closes all FIDL interface handles that are associated with this bt-host
  // device (excluding any Host interface handles).
  4: Close();

  // Returns information about the Bluetooth adapter managed by this host.
  5: GetInfo() -> (fuchsia.bluetooth.control.AdapterInfo @info);

  // Sets the local name for this adapter.
  6: SetLocalName(string local_name) -> (fuchsia.bluetooth.Status @status);

  // Initiates a general discovery procedure for BR/EDR and LE devices. On success, discovered
  // devices will be reported via AdapterDelegate.OnDeviceDiscovered().
  //
  // On the LE transport, only general-discoverable and connectable peripherals will be reported.
  //
  // Discovery will continue until it is terminated via StopDiscovery() or if the proxy to the
  // Adapter gets disconnected.
  7: StartDiscovery() -> (fuchsia.bluetooth.Status @status);

  // Terminates discovery if one was started via StartDiscovery(). The AdapterDelegate will stop
  // receiving device discovery notifications.
  //
  // NOTE: If another client is performing discovery (e.g. via its own Adapter interface handle),
  // then the system will continue performing device discovery even if this method results in
  // success.
  8: StopDiscovery() -> (fuchsia.bluetooth.Status @status);

  // Sets whether this host should be connectable.
  9: SetConnectable(bool enabled) -> (fuchsia.bluetooth.Status @status);

  // Sets whether this host should be discoverable.
  10: SetDiscoverable(bool enabled) -> (fuchsia.bluetooth.Status @status);

  // Events
  101: -> OnHostStateChanged(fuchsia.bluetooth.control.AdapterState state);
  102: -> OnDeviceUpdated(fuchsia.bluetooth.control.RemoteDevice device);
};
