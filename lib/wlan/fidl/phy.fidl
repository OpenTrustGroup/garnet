// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module wlan.phy;

enum ChannelBandwidth {
  CBW20,
  CBW40,
  CBW40ABOVE = CBW40,
  CBW40BELOW,
  CBW80,
  CBW160,
  CBW80P80,
};

struct Channel {
  uint8 primary;
  uint8 cbw;
  uint8 secondary80;
};

enum SupportedPhy {
  DSSS,
  CCK,
  OFDM,
  HT,
  VHT,
};

enum DriverFeature {
  SCAN_OFFLOAD,
  RATE_SELECTION,
};

enum MacRole {
  CLIENT,
  AP,
};

enum Capability {
  SHORT_PREAMBLE,
  SPECTRUM_MGMT,
  SHORT_SLOT_TIME,
  RADIO_MGMT,
};

struct HtCapabilities {
  uint16 ht_capability_info;
  uint8 ampdu_params;
  array<uint8> supported_mcs_set;
  uint16 ht_ext_capabilities;
  uint32 tx_beamforming_capabilities;
  uint8 asel_capabilities;
};

struct VhtCapabilities {
  uint32 vht_capability_info;
  uint64 supported_vht_mcs_and_nss_set;
};

struct ChannelList {
  uint16 base_freq;
  array<uint8> channels;
};

struct BandInfo {
  string description;
  HtCapabilities ht_caps;
  VhtCapabilities? vht_caps;
  array<uint8> basic_rates;
  ChannelList supported_channels;
};

struct WlanPhyInfo {
  // The id is not set by the device node, as it has no way of knowing what its id is, but this
  // field may be used by external systems to provide an identifier for a WlanPhy.
  uint16 id;

  array<SupportedPhy> supported_phys;
  array<DriverFeature> driver_features;
  array<MacRole> mac_roles;
  array<Capability> caps;
  array<BandInfo> bands;
};

struct CreateIfaceRequest {
    MacRole role;
};

struct DestroyIfaceRequest {
    uint16 id;
};
