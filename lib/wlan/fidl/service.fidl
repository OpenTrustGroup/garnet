// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module wlan.service;

import "garnet/lib/wlan/fidl/phy.fidl";
import "garnet/lib/wlan/fidl/iface.fidl";

struct ListPhysResponse {
    array<wlan.phy.WlanPhyInfo> phys;
};

struct ListIfacesResponse {
    array<wlan.iface.WlanIfaceInfo> ifaces;
};

struct CreateIfaceRequest {
    uint16 phy_id;
    wlan.phy.MacRole role;
};

struct CreateIfaceResponse {
    uint16 iface_id;
};

struct DestroyIfaceRequest {
    uint16 phy_id;
    uint16 iface_id;
};

// TODO(tkilbourn): replace this with FIDL2 events
interface DeviceListener {
    // Called when a phy device is added
    OnPhyAdded@0(uint16 id);
    // Called when a phy device is removed
    OnPhyRemoved@1(uint16 phy_id);
    // Called when an iface device is added
    OnIfaceAdded@2(uint16 phy_id, uint16 iface_id);
    // Called when an iface device is removed
    OnIfaceRemoved@3(uint16 phy_id, uint16 iface_id);
};

[ServiceName="wlan::DeviceService"]
interface DeviceService {
  ListPhys@0() => (ListPhysResponse resp);
  ListIfaces@1() => (ListIfacesResponse resp);
  CreateIface@2(CreateIfaceRequest req) => (CreateIfaceResponse resp);
  DestroyIface@3(DestroyIfaceRequest req);

  // Each client may register one DeviceListener to be notified of device
  // events. A client is unregistered by closing the channel.
  RegisterListener@4(DeviceListener listener);
};
