// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library wlan_device_service;

using wlan_device;

struct ListPhysResponse {
    vector<wlan_device.PhyInfo> phys;
};

struct ListIfacesResponse {
    vector<wlan_device.IfaceInfo> ifaces;
};

struct CreateIfaceRequest {
    uint16 phy_id;
    wlan_device.MacRole role;
};

struct CreateIfaceResponse {
    uint16 iface_id;
};

struct DestroyIfaceRequest {
    uint16 phy_id;
    uint16 iface_id;
};

// TODO(tkilbourn): replace this with FIDL2 events
interface DeviceListener {
    // Called when a phy device is added
    1: OnPhyAdded(uint16 id);
    // Called when a phy device is removed
    2: OnPhyRemoved(uint16 phy_id);
    // Called when an iface device is added
    3: OnIfaceAdded(uint16 phy_id, uint16 iface_id);
    // Called when an iface device is removed
    4: OnIfaceRemoved(uint16 phy_id, uint16 iface_id);
};

[ServiceName="wlan::DeviceService"]
interface DeviceService {
  1: ListPhys() -> (ListPhysResponse resp);
  2: ListIfaces() -> (ListIfacesResponse resp);
  3: CreateIface(CreateIfaceRequest req) -> (CreateIfaceResponse resp);
  4: DestroyIface(DestroyIfaceRequest req);

  // Each client may register one DeviceListener to be notified of device
  // events. A client is unregistered by closing the channel.
  5: RegisterListener(DeviceListener listener);
};
