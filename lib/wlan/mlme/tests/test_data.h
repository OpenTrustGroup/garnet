// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <wlan/mlme/frame_dispatcher.h>

#include <wlan/mlme/packet.h>
#include <wlan/mlme/service.h>

#include <fbl/unique_ptr.h>
#include <gtest/gtest.h>

namespace wlan {

std::vector<uint8_t> kBeaconFrame = {
    // clang-format off
    0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0x40, 0xe3, 0xd6, 0xbf, 0xf1, 0x71,
    0x40, 0xe3, 0xd6, 0xbf, 0xf1, 0x71, 0x10, 0xfe,
    0x89, 0xe0, 0x31, 0xcd, 0x16, 0x00, 0x00, 0x00,
    0x64, 0x00, 0x01, 0x11, 0x00, 0x0b, 0x47, 0x6f,
    0x6f, 0x67, 0x6c, 0x65, 0x47, 0x75, 0x65, 0x73,
    0x74, 0x01, 0x03, 0xc8, 0x60, 0x6c, 0x03, 0x01,
    0x30, 0x05, 0x04, 0x00, 0x01, 0x00, 0x00, 0x07,
    0x10, 0x55, 0x53, 0x20, 0x24, 0x04, 0x24, 0x34,
    0x04, 0x1e, 0x64, 0x0c, 0x1e, 0x95, 0x05, 0x24,
    0x00, 0x20, 0x01, 0x00, 0x23, 0x02, 0x09, 0x00,
    0x0b, 0x05, 0x13, 0x00, 0x09, 0xa1, 0x77, 0x2d,
    0x1a, 0xef, 0x09, 0x17, 0xff, 0xff, 0xff, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3d, 0x16, 0x30, 0x0f, 0x04,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7f, 0x08, 0x04, 0x00, 0x08,
    0x00, 0x00, 0x00, 0x00, 0x40, 0xbf, 0x0c, 0x91,
    0x59, 0x82, 0x0f, 0xea, 0xff, 0x00, 0x00, 0xea,
    0xff, 0x00, 0x00, 0xc0, 0x05, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xc3, 0x03, 0x01, 0x24, 0x24, 0xdd,
    0x07, 0x00, 0x0b, 0x86, 0x01, 0x04, 0x08, 0x09,
    0xdd, 0x16, 0x00, 0x0b, 0x86, 0x01, 0x03, 0x00,
    0x75, 0x73, 0x2d, 0x73, 0x65, 0x61, 0x2d, 0x77,
    0x61, 0x74, 0x2d, 0x30, 0x33, 0x2d, 0x30, 0x36,
    0xdd, 0x18, 0x00, 0x50, 0xf2, 0x02, 0x01, 0x01,
    0x80, 0x00, 0x03, 0xa4, 0x00, 0x00, 0x27, 0xa4,
    0x00, 0x00, 0x42, 0x43, 0x5e, 0x00, 0x62, 0x32,
    0x2f, 0x00,
    // clang-format on
};

std::vector<uint8_t> kBlockAckUnsupportedFrame = {
    // clang-format off
    0x94, 0x00, 0x00, 0x00, 0x40, 0xe3, 0xd6, 0xbf,
    0xf1, 0x71, 0x94, 0x65, 0x2d, 0xdc, 0x01, 0x00
    // clang-format on
};

std::vector<uint8_t> kDeauthFrame = {
    // clang-format off
    0xc1, 0x20, 0x79, 0xce, 0x01, 0xc8, 0x69, 0x4e, 0x01, 0x08, 0x79,
    0x4e, 0x01, 0x00, 0xe9, 0x46, 0x09, 0x84, 0xf9, 0x4e, 0x21, 0x08,
    0x79, 0x4e, 0x85, 0xc0, 0xb9, 0xce, 0x80, 0xc8
    // clang-format on
};

std::vector<uint8_t> kDataFrame = {
    // clang-format off
    0x08, 0x41, 0xb8, 0x40, 0x40, 0xe3, 0xd6, 0xbf,
    0xf9, 0x60, 0x78, 0x4f, 0x43, 0x94, 0x34, 0x03,
    0x40, 0x00, 0x5e, 0xc1, 0x0b, 0x51, 0xd0, 0x4b,
    0x01, 0x00, 0x2e, 0xbc, 0x00, 0x20, 0x02, 0x00,
    0x00, 0x80, 0xdc, 0xde, 0x00, 0x50, 0xb3, 0xa4,
    0xbf, 0xed, 0x33, 0x57, 0x6b, 0x99, 0x63, 0x99,
    0xeb, 0xc4, 0xfa, 0x53, 0x1c, 0x1b, 0x01, 0xf9,
    0xa4, 0xea, 0xe0, 0x28, 0x98, 0xf3, 0x78, 0x32,
    0x5b, 0xda, 0xb6, 0x3e, 0x66, 0xb6, 0xf7, 0xea,
    0x66, 0x2e, 0x39, 0x3e, 0x61, 0x36, 0x54, 0xcb,
    0xd2, 0x64, 0x32, 0x68, 0x1d, 0x9e, 0xe2, 0x90,
    0xab, 0x25, 0x11, 0x97, 0x50, 0x92, 0x11, 0xe5,
    0xdd, 0x1a, 0xb4, 0xd9, 0x87, 0x42, 0x36, 0x24,
    0x57, 0x07, 0xb4, 0xd9, 0x99, 0xf2, 0x32, 0x9c,
    0xb7, 0x44, 0xa8, 0x76, 0xc2, 0xc0, 0x1c, 0xe4,
    0x29, 0x36, 0x40, 0x0c, 0x2c, 0x8e, 0x77, 0xdc,
    0xc8, 0xb9, 0xce, 0x9d, 0x9a, 0x41,
    // clang-format on
};

std::vector<uint8_t> kNullDataFrame = {
    // clang-format off
    0x48, 0x09, 0x2c, 0x00, 0x40, 0xe3, 0xd6, 0xbf,
    0xf1, 0x71, 0x00, 0x61, 0x71, 0xc6, 0xda, 0xa4,
    0x40, 0xe3, 0xd6, 0xbf, 0xf1, 0x71, 0x10, 0xd8,
    // clang-format on
};

std::vector<uint8_t> kPsPollFrame = {
    // clang-format off
    0xa4, 0x10, 0x03, 0xc0, 0x40, 0xe3, 0xd6, 0xbf,
    0xf1, 0x70, 0x8c, 0x85, 0x90, 0x27, 0x8c, 0x08,
    // clang-format on
};

std::vector<uint8_t> kPsPollHtcUnsupportedFrame = {
    // clang-format off
            0x76, 0xf8, 0x6b, 0x93, 0x04, 0xd9, 0x6c, 0x5e,
            0x3a, 0xfc, 0xa5, 0x4a, 0xca, 0xc9, 0x4c, 0xfe,
            0xea, 0x99, 0xe9, 0x4b, 0x02, 0x1f
    // clang-format on
};

std::vector<uint8_t> kEthernetFrame = {
    // clang-format off
            0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
            0x09, 0x0a, 0x0b, 0x0c, 0xcd, 0xab, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00
    // clang-format on
};

fbl::unique_ptr<Packet> CreateFramePacket(const uint8_t* buf, size_t len) {
    auto buffer = GetBuffer(len);
    auto packet = fbl::make_unique<Packet>(fbl::move(buffer), len);
    packet->set_peer(Packet::Peer::kWlan);
    packet->CopyCtrlFrom(wlan_rx_info_t{});
    memcpy(packet->mut_data(), buf, len);
    return fbl::move(packet);

}  // namespace test_data
}  // namespace wlan
