// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.guest;

struct GuestEnvironmentInfo {
  // A globally unique identifier for this environment.
  uint32 id;

  // The string provided to |GuestManager.CreateEnvirionment|.
  string label;

  // List of guests running in this environment.
  vector<GuestInfo> guests;
};

struct GuestInfo {
  // Context ID to use to address this guest for vsocket communications. This
  // can also be used to uniquely identify a guest within an environment.
  uint32 cid;

  // The |label| string originally provided in the |GuestLaunchInfo| structure
  // or, if it was the null, the |url|
  string label;
};

[Discoverable]
interface GuestManager {
  // Create a new environment in which guests can be launched.
  //
  // The |label| is a string that is used for diagnostic purposes, such as
  // naming resources and dumping debug info.
  1: CreateEnvironment(string? label, request<GuestEnvironment> env);

  // Query for existing guest environments.
  //
  // This is intended for diagnostic purposes only.
  2: ListEnvironments() -> (vector<GuestEnvironmentInfo> env_infos);

  // Connect to a currently running guest environment identified by |id|. The
  // |id| can be found via a call to |ListEnvironments|.
  //
  // This is intended for diagnostic purposes only.
  3: ConnectToEnvironment(uint32 id, request<GuestEnvironment> env);
};
