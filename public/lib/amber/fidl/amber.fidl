// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be found
// in the LICENSE file.

library fuchsia.amber;

struct OAuth2Config {
  string clientId;

  string clientSecret = "";

  string authUrl;
  string tokenUrl;
  vector<string> scopes;
  string deviceCodeUrl;
};

struct DeviceCode {
  string userCode;
  string verificationUrl;
  int64 expiresIn;
};

struct KeyConfig {
  // Supported TUF key types. The only supported algorithm is ed25519.
  string type;

  // The value of the key encoded in hex.
  string value;
};

struct TLSClientConfig {
  // If insecureSkipTlsVerify is true, TLS will accept any certificate provided
  // by the server. This should only be used for testing.
  bool insecureSkipVerify = false;

  // The set of root certificate authorities that clients use when verifying
  // server certificates. If the list is empty, TLS uses the host's root CA
  // set.
  vector<string> rootCAs;
};

struct TransportConfig {
  // If true, prevent re-use of TCP connections between HTTP requests.
  bool disableKeepAlives = false;

  // The keep-alive period for an active network connection. A zero value means
  // that keep-alives are not enabled.
  int32 KeepAlive = 0;

  // The maximum number of idle (keep-alive) connections across all hosts. A
  // zero value means no limit.
  int32 maxIdleConns = 0;

  // The maximum number of idle (keep-alive) connections across for each host.
  // A zero value means no limit.
  int32 maxIdleConnsPerHost = 0;

  // The maximum amount of time to wait for a connection to complete in
  // milliseconds. A zero value means the connection will not time out.
  int32 connectTimeout = 0;

  // The deadline in milliseconds for a request to complete. A zero value means
  // the request will not time out.
  int32 requestTimeout = 0;

  // The maximum amount of time in milliseconds an idle (keep-alive) connection
  // will remain idle before closing itself. A zero value means the connection
  // will not close itself.
  int32 idleConnTimeout = 0;

  // The amount of time to wait for a server's response headers. A zero value
  // means no limit.
  int32 responseHeaderTimeout = 0;

  // The deadline in milliseconds to wait for a server's first response headers
  // if the request has an "Expect: 100-continue" header. A zero value means
  // the body will be sent immediately.
  int32 expectContinueTimeout = 0;

  // The deadline in milliseconds to wait for a TLS handshake. Zero means no
  // timeout.
  int32 tlsHandshakeTimeout = 0;

  TLSClientConfig? tlsClientConfig;
};

struct SourceConfig {
  // A unique identifier that distinquishes this source from others.
  string id;

  // The canonical URL for the TUF repository.
  string repoUrl;

  // Optionally download package blobs from this repository. If not specified,
  // blobs will be fetched from `$repoUrl/blobs`.
  string blobRepoUrl = "";

  // The rate limit indicates the number of requests per rateReriod, expressed
  // in milliseconds. A limit or period of zero means there is no limit.
  uint64 rateLimit;

  // How frequently to poll the TUF server.
  int32 ratePeriod;

  // A vector of public keys. These keys must match one of the trusted keys
  // known to the system.
  vector<KeyConfig> rootKeys;

  TransportConfig? transportConfig;

  OAuth2Config? oauth2Config;
};


[Discoverable]
interface Control {
  // simple no-op that can be used to test the connection
  1: DoTest(int32 input) -> (string output);

  // Add a TUF source repository.
  2: AddSrc(SourceConfig source) -> (bool res);

  // Remove a source previously provided to AddSrc. SourceConfigs that were
  // bundled when the system was built can not be removed.
  3: RemoveSrc(string url) -> (bool res);

  // Check for updates to any persistently registered packages
  4: Check() -> (bool res);

  // Get the list of URLs of the current set of sources
  5: ListSrcs() -> (vector<SourceConfig> srcs);

  // Get an update for the package identified by 'name' which has the provided
  // version. If no version is supplied, the latest available version of that
  // package will be retrieved. The package data is sent to PackageFS which then
  // stores the package in BlobFS. This method returns the merkle root of the
  // package and therefore a way to access the package once it arrives in
  // BlobFS. If null is returned, no update was found.
  6: GetUpdate(string name, string? version, string? mrkl) -> (string? merkle);

  // Get a content blob identified by the given hashed Merkle root. This returns
  // an error if the string is empty or the fetch fails for some reason.
  7: GetBlob(string merkle);

  8: PackagesActivated(vector<string> merkle);

  9: GetUpdateComplete(string name, string? version, string? merkle) -> (handle<channel> rplyChan);

  10: CheckForSystemUpdate() -> (bool res);

  // Log into the source specified by the source id. Returns the oauth2 device
  // flow code if the source is configured for authentication, or null if not.
  11: Login(string sourceId) -> (DeviceCode? device);
};
