// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library audio_policy;

// Audio policy service definition.
//
// TODO(dalesat): Update this definition.
// This definition is intended to solve short-term issues only, addressing the
// need to change audio gain system-wide. In the future, we will have a richer
// model in which audio 'tracks' are grouped and controlled by type and
// individual output gains can be tweaked.
[Discoverable]
interface AudioPolicy {
  // Gets the status. To get the status immediately, call
  // GetStatus(kInitialStatus). To get updates thereafter, pass the version
  // sent in the previous callback.
  1: GetStatus(uint64 version_last_seen)
      -> (uint64 version, AudioPolicyStatus @status);

  // Sets the system-wide gain in decibels. |db| values are clamped to the
  // range -160db to 0db inclusive. Setting gain to -160db implicitly mutes
  // system audio. Setting gain to a higher values when it's already -160db
  // implicitly unmutes system audio. Gain and mute are otherwise independent.
  2: SetSystemAudioGain(float32 db);

  // Sets the system-wide 'muted' value. Changing this value has no effect on
  // the system audio gain value. Calling this method with argument |false|
  // has no effect if system audio gain is set to -160db. Gain and mute are
  // otherwise independent.
  3: SetSystemAudioMute(bool muted);
};

// Describes the status of the audio policy service.
struct AudioPolicyStatus {
  // Current system audio gain in decibels. This value is independent of system
  // audio muted state.
  float32 system_audio_gain_db;

  // Indicates whether system audio is currently muted.
  bool system_audio_muted;
};
