// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library auth;

using views_v1_token;

// This file defines an auth provider service that can be used by Garnet's
// Token Manager service to mint oauth tokens for clients such as Framework,
// Ledger, gmail or chat module.

// Specifies the success/failure status from auth provider.
enum AuthProviderStatus {
  OK = 0;
  BAD_REQUEST = 1;
  BAD_RESPONSE = 2;
  OAUTH_SERVER_ERROR = 3;
  USER_CANCELLED = 4;
  REAUTH_REQUIRED = 5;
  NETWORK_ERROR = 6;
  UNSUPPORTED_PROVIDER = 7;
  INTERNAL_ERROR = 8;
  UNKNOWN_ERROR = 9;
};

// The type of token returned.
enum TokenType {
  ACCESS_TOKEN = 0;
  ID_TOKEN = 1;
};

// OAuth token response populated after parsing JSON object that contains
// short-lived access token or id token returned by the auth provider.
struct AuthToken {
  // Type of token.
  TokenType token_type;

  // Contains access token or a JWT identity token.
  string token;

  // The remaining lifetime of the token in seconds.
  uint64 expires_in;
};

// Stores attributes related to a firebase auth token for a given firebase api
// key.
//
// These tokens are minted by Firebase Auth server and are meant to be used for
// authorizing users into Firebase services such as DB and storage.
struct FirebaseToken {
  // Use this as the auth token in firebase database and storage requests.
  string id_token;

  // Use this to uniquely identify users.
  string? local_id;

  // Use this to uniquely identify user's email address provided by the
  // Auth Provider Firebase server.
  string? email;

  // The remaining lifetime of the token in seconds.
  uint64 expires_in;
};

// User attributes returned to callers on authorizing a new user at any auth
// provider. These attributes are generated by calling into auth provider's
// user profile apis.
struct UserProfileInfo {
  // User identifier returned by the backend identity provider server to
  // identify the user after successful authorization. Some identity providers
  // send verified email address as the identifier, and some send an opaque
  // string as the user identifier.
  string id;

  // The name that is displayed on the device shell while logging in. Display
  // name is fetched from user profile attributes as configured by the user at
  // the given identity provider.
  string? display_name;

  // User's profile url that is used by the device shell while logging in.
  // Profile url is fetched from user profile attributes as configured by the
  // user at the given identity provider.
  string? url;

  // User's profile image url that is used by the device shell while logging in.
  // Profile image url is fetched from user profile attributes as configured by
  // the user at the given identity provider.
  string? image_url;
};

// This interface is implemented by device shell. It is used to notify the
// device shell that a view for login needs to be started / stopped.
interface AuthenticationUIContext {
  // Requests device shell to display |view_owner| for authentication. Another
  // call to StartOverlay() will not be made until StopOverlay() has been
  // called.
  1: StartOverlay(views_v1_token.ViewOwner view_owner);

  // Requests device shell to stop displaying the auth view.
  2: StopOverlay();
};

// OAuth identity service that provisions new users and provides authorization
// tokens for the currently enrolled users. Some common Auth Providers are
// Google, Facebook, Spotify and Twitter.
[Discoverable]
interface AuthProvider {
  // Authenticates and authorizes an user against auth provider backend system
  // using OAuth protocol and returns the persistent credential such as
  // Google's refresh token or Facebook's access token for this user. These
  // persistent credentials are long lived and their expiration time is set by
  // the identity provider, for example Google's refresh tokens are valid until
  // user changes their password or revokes access explicitly, whereas Facebook
  // access tokens are valid upto 60 days or until user revokes access.
  //
  // During OAuth handshake, user needs to explicitly consent to the permissions
  // as configured at the server. The consent is presented in a web_view using
  // |auth_ui_context| overlay provided by the device_shell.
  1: GetPersistentCredential(AuthenticationUIContext? auth_ui_context) ->
      (AuthProviderStatus @status, string? credential,
      UserProfileInfo? user_profile_info);

  // Exchanges user persistent |credential| to an app specific OAuth access
  // token for the specified client_id and scopes. The |credential| is a long
  // lived OAuth refresh or access token as generated by the external identity
  // provider in the above Authorize() call.
  //
  // Access tokens are used by applications to make API requests against
  // services offered by the Auth Provider.
  //
  // Returns an auth token response containing access token, if successful.
  // Otherwise, an error status is returned.
  2: GetAppAccessToken(string credential, string? client_id,
      vector<string>? scopes) ->
      (AuthProviderStatus @status, AuthToken? auth_token);

  // Exchanges user persistent |credential| to an OAuth Identity token for the
  // specified audience. The audience is the intended recipient of the id_token.
  // The |credential| is a long lived OAuth refresh or access token as generated
  // by the external identity provider in the above Authorize() call.
  //
  // OAuth Id tokens are JSON Web Tokens (JWT) that contains digitally signed
  // identity information about the user for the intended recipient |audience|.
  //
  // Returns an auth token response containing id token, if successful.
  // Otherwise, an error status is returned.
  3: GetAppIdToken(string credential, string? audience) ->
      (AuthProviderStatus @status, AuthToken? auth_token);

  // Gets the firebase auth token for user identified by |id_token| and the
  // requested firebase api key. The |id_token| is the JWT Identity token
  // returned from GetAppIdToken() call above.
  //
  // Returns a firebase auth token from the server if successful. Otherwise, an
  // error status is returned.
  4: GetAppFirebaseToken(string id_token, string firebase_api_key) ->
      (AuthProviderStatus @status, FirebaseToken? firebase_token);

  // Revokes user's grants at the Auth Provider by revoking the persistent
  // |credential| or the app specific access token. The |credential| is a
  // long lived OAuth refresh or access token as generated by the external
  // identity provider in the above Authorize() call or an app specific access
  // token as returned in GetAppAccessToken() call.
  5: RevokeAppOrPersistentCredential(string credential) ->
      (AuthProviderStatus @status);
};
