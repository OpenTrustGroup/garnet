// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library bluetooth_control;

// Possible values for the LE Appearance property which describes the external appearance of a
// device at a high level.
// (See the Bluetooth assigned-numbers document:
// https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.gap.appearance.xml)
enum Appearance {
  UNKNOWN = 0;
  PHONE = 64;
  COMPUTER = 128;
  WATCH = 192;
  WATCH_SPORTS = 193;
  CLOCK = 256;
  DISPLAY = 320;
  REMOTE_CONTROL = 384;
  EYE_GLASSES = 448;
  TAG = 512;
  KEYRING = 576;
  MEDIA_PLAYER = 640;
  BARCODE_SCANNER = 704;
  THERMOMETER = 768;
  THERMOMETER_EAR = 769;
  HEART_RATE_SENSOR = 832;
  HEART_RATE_SENSOR_BELT = 833;
  BLOOD_PRESSURE = 896;
  BLOOD_PRESSURE_ARM = 897;
  BLOOD_PRESSURE_WRIST = 898;
  HID = 960;
  HID_KEYBOARD = 961;
  HID_MOUSE = 962;
  HID_JOYSTICK = 963;
  HID_GAMEPAD = 964;
  HID_DIGITIZER_TABLET = 965;
  HID_CARD_READER = 966;
  HID_DIGITAL_PEN = 967;
  HID_BARCODE_SCANNER = 968;
  GLUCOSE_METER = 1024;
  RUNNING_WALKING_SENSOR = 1088;
  RUNNING_WALKING_SENSOR_IN_SHOE = 1089;
  RUNNING_WALKING_SENSOR_ON_SHOE = 1090;
  RUNNING_WALKING_SENSOR_ON_HIP = 1091;
  CYCLING = 1152;
  CYCLING_COMPUTER = 1153;
  CYCLING_SPEED_SENSOR = 1154;
  CYCLING_CADENCE_SENSOR = 1155;
  CYCLING_POWER_SENSOR = 1156;
  CYCLING_SPEED_AND_CADENCE_SENSOR = 1157;
  PULSE_OXIMETER = 3136;
  PULSE_OXIMETER_FINGERTIP = 3137;
  PULSE_OXIMETER_WRIST = 3138;
  WEIGHT_SCALE = 3200;
  PERSONAL_MOBILITY = 3264;
  PERSONAL_MOBILITY_WHEELCHAIR = 3265;
  PERSONAL_MOBILITY_SCOOTER = 3266;
  GLUCOSE_MONITOR = 3328;
  SPORTS_ACTIVITY = 5184;
  SPORTS_ACTIVITY_LOCATION_DISPLAY = 5185;
  SPORTS_ACTIVITY_LOCATION_AND_NAV_DISPLAY = 5186;
  SPORTS_ACTIVITY_LOCATION_POD = 5187;
  SPORTS_ACTIVITY_LOCATION_AND_NAV_POD = 5188;
};

enum TechnologyType {
  LOW_ENERGY = 0;
  CLASSIC = 1;
  DUAL_MODE = 2;
};

// Represents a remote BR/EDR, LE, or dual-mode BR/EDR/LE device discovered during general
// discovery.
struct RemoteDevice {
  // UUID that uniquely identifies this device on the current system.
  string identifier;

  // Bluetooth device address that identifies this remote device. Clients should display this field
  // to the user when |name| is not available.
  //
  // NOTE: Clients should use the |identifier| field to distinguish between remote devices instead
  // of using their address.
  string address;

  // The Bluetooth technologies that are supported by this device.
  TechnologyType technology;

  // The name of the remote device if present or known.
  string? name;

  // The LE appearance property. Present if this is a LE device and the appearance information was
  // obtained over advertising and/or GATT.
  Appearance appearance;

  // The most recently obtained advertising signal strength for this device.
  bluetooth.Int8? rssi;

  // The most recently obtained transmission power for this device.
  bluetooth.Int8? tx_power;

  // Whether or not a BR/EDR and/or LE connection exists between the local adapter and this device.
  bool connected;

  // Whether or not a bond exists between the local adapter and this device.
  bool bonded;

  // The list of service UUIDs that are known to be published on this remote device.
  vector<string> service_uuids;
};

// Contains state information for a particular Bluetooth adapter.
struct AdapterState {
  // Whether or not the Bluetooth radio is currently powered and ready to use.
  bluetooth.Bool? powered;

  // The complete local nae of the local adapter that is visible to other devices when
  // discoverable.
  string? local_name;

  // Shortened version of the local name used when discoverable, if available. If this is not
  // present then |local_name| is used.
  string? shortened_local_name;

  // Whether or not device discovery is currently being performed.
  bluetooth.Bool? discovering;

  // Whether or not the local adapter is currently discoverable over BR/EDR and LE physical
  // channels.
  bluetooth.Bool? discoverable;

  // Service UUIDs of all local services that are published and available to other
  // devices via this adapter. These services are usually registered using the GATT
  // and the classic profile APIs.
  vector<string>? local_service_uuids;
};

// Contains static global information about a local Bluetooth adapter, including its current state.
// Each adapter instance represents a physical Bluetooth controller and its associated
// host-subsystem state that is present on the current platform.
struct AdapterInfo {
  // UUID that uniquely identifies this adapter on the current system.
  string identifier;

  // The Bluetooth technologies that are supported by this adapter.
  TechnologyType technology;

  // 6-octet Bluetooth device address which can be displayed to the user.
  string address;

  // The current adapter state. This field is only present when an AdapterInfo
  // is obtained via the Adapter and AdapterDelegate interfaces. If present, all
  // optional members of |state| will also be present.
  AdapterState? state;
};

// Delegate interface for receiving notifications from an adapter.
interface AdapterDelegate {
  // Called when the adapter state changes. Only the changed fields of |state|
  // will be present; unchanged fields will be null.
  1: OnAdapterStateChanged(AdapterState state);

  // Called during device discovery to report a discovered device.
  2: OnDeviceDiscovered(RemoteDevice device);
};

// bluetooth.Interface for interacting with a local Bluetooth adapter.
interface Adapter {
  // Returns information about this adapter, including its state.
  1: GetInfo() -> (AdapterInfo info);

  // Registers a delegate to receive adapter state notifications.
  2: SetDelegate(AdapterDelegate delegate);

  // Sets the complete and optionally the shortened local name for this adapter.
  3: SetLocalName(string local_name, string? shortened_local_name) -> (bluetooth.Status @status);

  // Powers this adapter on or off.
  4: SetPowered(bool powered) -> (bluetooth.Status @status);

  // Initiates a general discovery procedure for BR/EDR and LE devices. On success, discovered
  // devices will be reported via AdapterDelegate.OnDeviceDiscovered().
  //
  // On the LE transport, only general-discoverable and connectable peripherals will be reported.
  //
  // Discovery will continue until it is terminated via StopDiscovery() or if the proxy to the
  // Adapter gets disconnected.
  5: StartDiscovery() -> (bluetooth.Status @status);

  // Terminates discovery if one was started via StartDiscovery(). The AdapterDelegate will stop
  // receiving device discovery notifications.
  //
  // NOTE: If another client is performing discovery (e.g. via its own Adapter interface handle),
  // then the system will continue performing device discovery even if this method results in
  // success.
  6: StopDiscovery() -> (bluetooth.Status @status);
};

// Delegate interface for receiving notifications from an AdapterManager.
interface AdapterManagerDelegate {
  // Called when the active adapter has been updated. If |active_adapter| is null, then no adapter
  // is currently active.
  1: OnActiveAdapterChanged(AdapterInfo? active_adapter);

  // Called when a new adapter is added to the system.
  2: OnAdapterAdded(AdapterInfo adapter);

  // Called when an adapter with the given |identifier| has been removed from the system.
  3: OnAdapterRemoved(string identifier);
};

// Primary Bluetooth control service to watch for local Bluetooth adapters.
[ServiceName="bluetooth::control::AdapterManager"]
interface AdapterManager {
  // Returns whether or not Bluetooth is currently available on the system.
  1: IsBluetoothAvailable() -> (bool available);

  // Registers a delegate to receive notifications from this AdapterManager.
  2: SetDelegate(AdapterManagerDelegate delegate);

  // Returns information about all local adapters that are known to the system.
  3: ListAdapters() -> (vector<AdapterInfo>? adapters);

  // Sets the local adapter with the given |identifier| to act as the backing adapter for all
  // Bluetooth interfaces.
  4: SetActiveAdapter(string identifier) -> (bluetooth.Status @status);

  // Returns a handle to the current local adapter, if it exists.
  5: GetActiveAdapter(request<Adapter> adapter);
};
