// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module cobalt;

// Cobalt is the service used in Fuchsia to report metrics. This file contains
// interfaces that allow clients to report metric Observations to Cobalt.

// To use Cobalt, you must have a project id, metric id and encoding id
// registered with the Cobalt system. In the current verison of Cobalt
// registration consists of entries in the files "registered_encodings.txt"
// and "registered_metrics.txt" in //third_party/cobalt/config/production. Since
// the Cobalt servers also read these files, for now it is necessary to
// contact cobalt-hackers@google.com in order to register additional projects,
// metrics and encodings. We plan to build a self-registration system in the
// future.

// Usage: First use CobaltEncoderFactory to get a CobaltEncoder for your
// project. Then you add Observations using the Add*Observation() methods.
// Observations are accumulated by the CobaltEncoder and periodically sent
// to the Cobalt server.

// The maximum size of a single Observation is 100 KB.
const int64 kMaxBytesPerObservation = 102400;

// Response codes for Cobalt encoder operations.
enum Status {
  OK = 0,

  // For example the supplied metric id, encoding id or observation value is
  // invalid.
  INVALID_ARGUMENTS,

  // Sending observations failed too many times or with an unrecoverable error
  // Try the send again later. OBSOLETE: This status is never used.
  SEND_FAILED,

  // The attempted operation failed because some precondition was not met.
  // OBSOLETE: This status is never used.
  FAILED_PRECONDITION,

  // An attempt was made to add an Observation whose seralized size exceeds
  // kMaxBytesPerObservation.
  OBSERVATION_TOO_BIG,

  // Cobalt's local cache is temporarily full and cannot handle any more
  // Observations at this time. This condition should be rare because Cobalt
  // will automatically send Observations to the server and clear the cache
  // when it starts to get too full. In the current version of Cobalt,
  // Observations are cached in memory so this error could possibly occur if the
  // server is down for a long time. In the future Cobalt will store
  // Observations in non-volatile storage making this condition much less
  // likely.
  TEMPORARILY_FULL,

  // Catch-all for unexpected errors.
  INTERNAL_ERROR = -1
};

// One part of a multi-part observation. This is used by the method
// AddMultipartObservation(). To add a simple single-part Observation this
// type is not needed.
struct ObservationValue {
  // The name of an ObservationPart, as registered in Cobalt's configuration.
  string name;

  // The value to assign to that part of the Observation.
  Value  value;

  // The ID of the encoding to use for that part of the Observation.
  uint32 encoding_id;
};

struct BucketDistributionEntry {
  uint32 index;
  uint64 count;
};

// A value that may be a string, int, double, index or distribution of ints.
union Value {
  string string_value;
  int64  int_value;
  double double_value;
  uint32 index_value;
  // Definition of the buckets is given by the IntegerBuckets in the MetricPart
  // definition registered with Cobalt.
  array<BucketDistributionEntry> int_bucket_distribution;
};

[ServiceName="cobalt::CobaltEncoderFactory"]
// CobaltEncoderFactory creates a CobaltEncoder for a particular project.
interface CobaltEncoderFactory {
  // Creates a CobaltEncoder for the specified project.
  // |project_id| Should be a project ID registered with the Cobalt system.
  GetEncoder@0(int32 project_id, CobaltEncoder& encoder);
};

// CobaltEncoder accumulates Observations in a local cache and periodically
// sends them to the server. An instance of CobaltEncoder is associated with a
// particular Cobalt project ID.
//
// Next method ordinal: 8
interface CobaltEncoder {
  // Adds a string observation. It will eventually be sent to the Cobalt server.
  // |metric_id| Must be a metric ID registered with the Cobalt system and
  //             associated with this encoder's project ID. The specified
  //             metric must have a single part of type STRING.
  //
  // |encoding_id| Must be an encoding ID registered with the Cobalt system
  //               and associated with this encoder's project ID.
  //
  // |observation| The string value to be encoded. Must be consistent with
  //               the definition of the metric and encoding. Some encodings
  //               restrict the set of values to a pre-defined list.
  AddStringObservation@0(uint32 metric_id, uint32 encoding_id,
                         string observation)
      => (Status status);

  // Adds an integer observation. It will eventually be sent to the Cobalt
  // server.
  // |metric_id| Must be a metric ID registered with the Cobalt system and
  //             associated with this encoder's project ID. The specified
  //             metric must have a single part of type INT.
  //
  // |encoding_id| Must be an encoding ID registered with the Cobalt system
  //               and associated with this encoder's project ID.
  //
  // |observation| The integer value to be encoded. Must be consistent with
  //               the definition of the metric and encoding. Some encodings
  //               restrict the set of values to a pre-defined list.
  AddIntObservation@3(uint32 metric_id, uint32 encoding_id, int64 observation)
      => (Status status);

  // Adds a double observation. It will eventually be sent to the Cobalt server.
  // |metric_id| Must be a metric ID registered with the Cobalt system and
  //             associated with this encoder's project ID. The specified
  //             metric must have a single part of type DOUBLE.
  //
  // |encoding_id| Must be an encoding ID registered with the Cobalt system
  //               and associated with this encoder's project ID.
  //
  // |observation| The double value to be encoded. Must be consistent with
  //               the definition of the metric and encoding.
  AddDoubleObservation@4(uint32 metric_id, uint32 encoding_id,
                         double observation)
      => (Status status);

  // Adds an observation specified by its index. This only makes sense if
  // the specified metric and encoding are consistent with values of type INDEX.
  // The Observation will eventually be sent to the Cobalt server.
  // |metric_id| Must be a metric ID registered with the Cobalt system and
  //             associated with this encoder's project ID. The specified
  //             metric must have a single part of type INDEX.
  //
  // |encoding_id| Must be an encoding ID registered with the Cobalt system
  //               and associated with this encoder's project ID. The
  //               ecoding must support values of type INDEX. Some encoding
  //               configurations may specify a maximum index and in that case
  //               |index| must not exceed that maximum.
  //
  // |index|  The zero-based index of the value to be encoded. This is an index
  //          into some enumerated set of values that must be maintained outside
  //          of the scope of Cobalt's client-side configuration system by the
  //          client of this API.  Cobalt treats the given |index| as opaque,
  //          except that human-readable string labels may optionally be
  //          associated with the indices in Cobalt's server-side configuration
  //          in a |ReportConfig|. This allows Cobalt to use these strings in
  //          place of the indices when generating reports. However there is
  //          no requirement to register a label with an index in order to
  //          use the index here. Also the label may be added or changed later.
  AddIndexObservation@1(uint32 metric_id, uint32 encoding_id, uint32 index)
      => (Status status);

  // Adds an observation. It will eventually be sent to the Cobalt server.
  // This version of Add*Observation() allows the user to specify the
  // observation using the variadic type |Value|.
  // |metric_id| Must be a metric ID registered with the Cobalt system and
  //             associated with this encoder's project ID.  The specified
  //             metric must have a single part and the the type of this part
  //             must be consistent with the runtime type of |observation|.
  //
  // |encoding_id| Must be an encoding ID registered with the Cobalt system
  //               and associated with this encoder's project ID.
  //
  // |observation| The Observation to be encoded. The runtime type must be
  //               consistent with the definition of the metric and encoding.
  AddObservation@7(uint32 metric_id, uint32 encoding_id,
                   Value observation)
      => (Status status);

  // Adds a distribution of int observations. It will eventually be sent to the
  // Cobalt server.
  //
  // |metric_id| Must be a metric ID registered with the Cobalt system and
  //             associated with this encoder's project ID.  The specified
  //             metric must have a single part of type INT.
  //
  // |encoding_id| Must be an encoding ID registered with the Cobalt system
  //               and associated with this encoder's project ID.
  //
  // |distribution| The Distribution to be encoded. A bucket distribution is a
  //                mapping from bucket indices to element counts in those
  //                buckets. The definition of the buckets is given by the
  //                IntegerBuckets in the MetricPart definition registered with
  //                Cobalt.
  AddIntBucketDistribution@6(uint32 metric_id, uint32 encoding_id,
                             array<BucketDistributionEntry> distribution)
      => (Status status);

  // Adds a multi-part observation. It will eventually be sent to the Cobalt
  // server.
  // |metric_id| Must be a metric ID registered with the Cobalt system and
  //             associated with this encoder's project ID.
  //
  // |observation| The multi-value Observation to be encoded. Must be consistent
  //               with the definition of the metric and encoding.
  AddMultipartObservation@5(uint32 metric_id,
                            array<ObservationValue> observation)
      => (Status status);

  // Obsolete. This does nothing and always returns OK.
  SendObservations@2() => (Status status);
};
