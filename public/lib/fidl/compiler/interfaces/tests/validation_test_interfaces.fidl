// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module f1dl.test;

struct StructA {
  uint64 i;
};

struct StructB {
  StructA struct_a;
};

struct StructC {
  array<uint8> data;
};

struct StructD {
  array<handle<channel>> message_pipes;
};

struct StructF {
  array<uint8, 3> fixed_size_array;
};

struct StructG {
  int32 i;
  [MinVersion=1] StructA? struct_a;
  [MinVersion=3] string? str;
  [MinVersion=3] bool b;
};

struct StructH {
  bool a;
  uint8 b;
  UnionA? c;
  array<UnionA>? d;
};

union UnionA {
  uint16 a;
  uint32 b;
  StructA? c;
  array<uint8>? d;
  UnionB? e;
  StructA f;
  array<uint8> g;
  UnionB h;
};

union UnionB {
  uint16 a;
  uint32 b;
  uint64 c;
  uint32 d;
};

interface InterfaceA {};

// This interface is used for testing bounds-checking in the fidl
// binding code. If you add a method please update the files
// ./data/validation/boundscheck_*. If you add a response please update
// ./data/validation/resp_boundscheck_*.
[ServiceName="this.is.the.service.name.for.BoundsCheckTestInterface"]
interface BoundsCheckTestInterface {
  Method0@0(uint8 param0) => (uint8 param0);
  Method1@1(uint8 param0);
};

interface ConformanceTestInterface {
  Method0@0(float param0);
  Method1@1(StructA param0);
  Method2@2(StructB param0, StructA param1);
  Method3@3(array<bool> param0);
  Method4@4(StructC param0, array<uint8> param1);
  Method6@5(array<array<uint8>> param0);
  Method7@6(StructF param0, array<array<uint8, 3>?, 2> param1);
  Method8@7(array<array<string>?> param0);
  Method9@8(array<array<handle?>>? param0);
  Method11@9(StructG param0);
  Method12@10(float param0) => (float param0);
  Method13@11(InterfaceA? param0, uint32 param1, InterfaceA? param2);
  Method14@12(UnionA param0);
  Method15@13(StructH param0);
};

struct BasicStruct {
  int32 a;
};

interface IntegrationTestInterface {
  Method0@0(BasicStruct param0) => (array<uint8> param0);
};

// An enum generates a enum-value validation function, so we want to test it.
// E.g., valid enum values for this enum should be:  -3, 0, 1, 10
enum BasicEnum {
  A,
  B,
  C = A,
  D = -3,
  E = 0xA,
};

// The enum validation function should be generated within the scope of this
// struct.
struct StructWithEnum {
  enum EnumWithin {
    A,
    B,
    C,
    D,
  };
};
