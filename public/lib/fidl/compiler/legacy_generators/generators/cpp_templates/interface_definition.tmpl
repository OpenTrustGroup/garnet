{%- import "interface_macros.tmpl" as interface_macros %}
{%- import "struct_macros.tmpl" as struct_macros %}
{%- from "enum_macros.tmpl" import is_valid_enum_def %}
{%- from "enum_macros.tmpl" import global_enum_operators_def %}

{%- set class_name = interface.name -%}
{%- set base_name = "internal::%s_Base"|format(interface.name) -%}
{%- set proxy_name = interface.name ~ "Proxy" -%}

{%- macro alloc_params(struct) %}
{%-   for param in struct.packed.packed_fields_in_ordinal_order %}
  {{param.field.kind|cpp_result_type}} p_{{param.field.name}} {};
{%-   endfor %}
  {{struct_macros.deserialize(struct, "params", "p_%s")}}
{%- endmacro %}

{%- macro pass_params(parameters) %}
{%-   for param in parameters %}
{%-     if param.kind|is_move_only_kind -%}
std::move(p_{{param.name}})
{%-     else -%}
p_{{param.name}}
{%-     endif -%}
{%-     if not loop.last %}, {% endif %}
{%-   endfor %}
{%- endmacro %}

{%- macro build_message(struct, struct_display_name) -%}
  {{struct_macros.serialize(struct, struct_display_name, "in_%s", "params", "builder.buffer()", false)}}
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
{%- endmacro %}

{#--- ForwardToCallback definition #}
{%- for method in interface.methods -%}
{%-   if method.response_parameters != None %}
class {{class_name}}_{{method.name}}_ForwardToCallback
    : public ::f1dl::MessageReceiver {
 public:
  {{class_name}}_{{method.name}}_ForwardToCallback(
      const {{class_name}}::{{method.name}}Callback& callback)
      : callback_(callback) {
    ZX_DEBUG_ASSERT_MSG(callback_, "Supplied response callback handler must not be "
                             " empty for {{class_name}}.{{method.name}}");
  }
  bool Accept(::f1dl::Message* message) override;
 private:
  {{class_name}}::{{method.name}}Callback callback_;
  {{class_name}}_{{method.name}}_ForwardToCallback(const {{class_name}}_{{method.name}}_ForwardToCallback&) = delete;
  {{class_name}}_{{method.name}}_ForwardToCallback& operator=(const {{class_name}}_{{method.name}}_ForwardToCallback&) = delete;
};
bool {{class_name}}_{{method.name}}_ForwardToCallback::Accept(
    ::f1dl::Message* message) {
  internal::{{class_name}}_{{method.name}}_ResponseParams_Data* params =
      reinterpret_cast<internal::{{class_name}}_{{method.name}}_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  {{alloc_params(method.response_param_struct)}}
  callback_({{pass_params(method.response_parameters)}});
  return true;
}
{%-   endif %}
{%- endfor %}

{{proxy_name}}::{{proxy_name}}(::f1dl::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
{# receiver_ is unused when there are no generated methods. Silence warnings. #}
  (void)receiver_;
}

{#--- Proxy definitions #}

{%- for method in interface.methods %}
{%-   set message_name =
          "%s::MessageOrdinals::%s"|format(base_name, method.name) %}
{%-   set params_struct = method.param_struct %}
{%-   set params_description =
          "%s.%s request"|format(interface.name, method.name) %}
void {{proxy_name}}::{{method.name}}(
    {{interface_macros.declare_request_params("in_", method)}}) {
  {{struct_macros.get_serialized_size(params_struct, "in_%s")}}

{%- if method.response_parameters != None %}
  ::f1dl::RequestMessageBuilder builder(
      static_cast<uint32_t>({{message_name}}), size);
{%- else %}
  ::f1dl::MessageBuilder builder(
    static_cast<uint32_t>({{message_name}}), size);
{%- endif %}

  {{build_message(params_struct, params_description)}}

{%- if method.response_parameters != None %}
  ::f1dl::MessageReceiver* responder =
      new {{class_name}}_{{method.name}}_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
{%- else %}
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  (void) ok;
{%- endif %}
}
{%- endfor %}

{#--- ProxyToResponder definition #}
{%- for method in interface.methods -%}
{%-   if method.response_parameters != None %}
{%-     set message_name =
            "%s::MessageOrdinals::%s"|format(base_name, method.name) %}
{%-     set response_params_struct = method.response_param_struct %}
{%-     set params_description =
            "%s.%s response"|format(interface.name, method.name) %}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
{# TODO(vardhan): Consider making a ::f1dl::internal::Callback wrapper instead of
   generating something movable? #}
class {{class_name}}_{{method.name}}_ProxyToResponder {
 public:
  {{class_name}}_{{method.name}}_ProxyToResponder(
      {{class_name}}_{{method.name}}_ProxyToResponder&& other) {
    responder_ = other.responder_;
    request_id_ = other.request_id_;
    other.responder_ = nullptr;
  }
  ~{{class_name}}_{{method.name}}_ProxyToResponder() {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    if (callback_was_dropped) {
      delete responder_;
      ZX_DEBUG_ASSERT_MSG(false, "The callback passed to "
          "{{class_name}}::{{method.name}}({%- if method.parameters -%}{{pass_params(method.parameters)}}, {% endif -%}callback) "
          "was never run.");
    }
  }

  {{class_name}}_{{method.name}}_ProxyToResponder(
      uint64_t request_id,
      ::f1dl::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void operator()({{interface_macros.declare_params_as_args("in_",
    method.response_parameters)}}) const;

 private:
  uint64_t request_id_;
  mutable ::f1dl::MessageReceiverWithStatus* responder_;

  {{class_name}}_{{method.name}}_ProxyToResponder(const {{class_name}}_{{method.name}}_ProxyToResponder&) = delete;
  {{class_name}}_{{method.name}}_ProxyToResponder& operator=(const {{class_name}}_{{method.name}}_ProxyToResponder&) = delete;
};

void {{class_name}}_{{method.name}}_ProxyToResponder::operator()(
    {{interface_macros.declare_params_as_args("in_", method.response_parameters)}}) const {
  {{struct_macros.get_serialized_size(response_params_struct, "in_%s")}}
  ::f1dl::ResponseMessageBuilder builder(
      static_cast<uint32_t>({{message_name}}), size, request_id_);
  {{build_message(response_params_struct, params_description)}}
  bool ok = responder_->Accept(builder.message());
  (void) ok;
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
{%-   endif -%}
{%- endfor %}

{{class_name}}Stub::{{class_name}}Stub()
    : sink_(nullptr) {
}

{{class_name}}Stub::~{{interface.name}}Stub() {}

{#--- Stub definition #}

bool {{class_name}}Stub::Accept(::f1dl::Message* message) {
{%- if interface.methods %}
  {{base_name}}::MessageOrdinals method_ordinal =
      static_cast<{{base_name}}::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
{%-   for method in interface.methods %}
    case {{base_name}}::MessageOrdinals::{{method.name}}: {
{%-     if method.response_parameters == None %}
      internal::{{class_name}}_{{method.name}}_Params_Data* params =
          reinterpret_cast<internal::{{class_name}}_{{method.name}}_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      {{alloc_params(method.param_struct)|indent(4)}}
      // A null |sink_| means no implementation was bound.
      ZX_DEBUG_ASSERT(sink_);
      sink_->{{method.name}}({{pass_params(method.parameters)}});
      return true;
{%-     else %}
      break;
{%-     endif %}
    }
{%-   endfor %}
  }
{%- endif %}
  return false;
}

bool {{class_name}}Stub::AcceptWithResponder(
    ::f1dl::Message* message, ::f1dl::MessageReceiverWithStatus* responder) {
{%- if interface.methods %}
  {{base_name}}::MessageOrdinals method_ordinal =
      static_cast<{{base_name}}::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
{%-   for method in interface.methods %}
    case {{base_name}}::MessageOrdinals::{{method.name}}: {
{%-     if method.response_parameters != None %}
      internal::{{class_name}}_{{method.name}}_Params_Data* params =
          reinterpret_cast<internal::{{class_name}}_{{method.name}}_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      {{class_name}}::{{method.name}}Callback callback =
          fxl::MakeCopyable({{class_name}}_{{method.name}}_ProxyToResponder(
              message->request_id(), responder));
      {{alloc_params(method.param_struct)|indent(4)}}
      // A null |sink_| means no implementation was bound.
      ZX_DEBUG_ASSERT(sink_);
      sink_->{{method.name}}(
{%- if method.parameters -%}{{pass_params(method.parameters)}}, {% endif -%}callback);
      return true;
{%-     else %}
      break;
{%-     endif %}
    }
{%-   endfor %}
  }
{%- endif %}
  return false;
}
