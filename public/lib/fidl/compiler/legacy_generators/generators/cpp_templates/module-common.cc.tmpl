// NOTE: This file was generated by the Mojo bindings generator.
#include "{{module.path}}-common.h"

#include <math.h>
#include <ostream>

#include "lib/fidl/cpp/bindings/internal/array_serialization.h"
#include "lib/fidl/cpp/bindings/internal/bindings_serialization.h"
#include "lib/fidl/cpp/bindings/internal/bounds_checker.h"
#include "lib/fidl/cpp/bindings/internal/map_data_internal.h"
#include "lib/fidl/cpp/bindings/internal/map_serialization.h"
#include "lib/fidl/cpp/bindings/internal/message_builder.h"
#include "lib/fidl/cpp/bindings/internal/message_validation.h"
#include "lib/fidl/cpp/bindings/internal/string_serialization.h"
#include "lib/fidl/cpp/bindings/internal/validate_params.h"
#include "lib/fidl/cpp/bindings/internal/validation_errors.h"
#include "lib/fidl/cpp/bindings/internal/validation_util.h"
#include "lib/fxl/logging.h"

{%- for namespace in namespaces_as_array %}
namespace {{namespace}} {
{%- endfor %}

// --- Constants ---
{%- for constant in module.constants %}
{%-   if not constant.kind|is_numerical_kind %}
const {{constant.kind|cpp_pod_type}} {{constant.name}}
    = {{constant|constant_value}};
{%-   endif %}
{%- endfor %}

namespace internal {

// --- Struct definitions ---
{%  for struct in structs %}
{%-   include "struct_definition.tmpl" %}
{%- endfor %}

// --- Union definitions ---
{%  for union in unions %}
{%-   include "union_definition.tmpl" %}
{%- endfor %}

// --- Definitions of the data structs for interface methods ---
{%- for interface in interfaces %}
{%-   for method in interface.methods %}
{%      set struct = method.param_struct %}
{%-     include "struct_definition.tmpl" %}
{%-     if method.response_parameters != None %}
{%-       set struct = method.response_param_struct %}
{%-       include "struct_definition.tmpl" %}
{%-     endif %}
{%-   endfor %}
{%- endfor %}

}  // namespace internal

// --- Request and response validator definitions for interfaces ---
{%- for interface in interfaces %}
{%-   set base_name = "internal::%s_Base"|format(interface.name) %}
::f1dl::internal::ValidationError {{interface.name}}RequestValidator::Validate(
    const ::f1dl::Message* message,
    std::string* err) {
  {{base_name}}::MessageOrdinals method_ordinal =
      static_cast<{{base_name}}::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
{%-   for method in interface.methods %}
    case {{base_name}}::MessageOrdinals::{{method.name}}: {
      auto retval = ::f1dl::internal::ValidationError::NONE;
{%-     if method.response_parameters != None %}
      retval = ::f1dl::internal::ValidateMessageIsRequestExpectingResponse(
          message, err);
      if (retval != ::f1dl::internal::ValidationError::NONE) {
        FIDL_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface '{{interface.name}}', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
{%-     else %}
      retval = ::f1dl::internal::ValidateMessageIsRequestWithoutResponse(
          message, err);
      if (retval != ::f1dl::internal::ValidationError::NONE) {
        FIDL_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface '{{interface.name}}', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
{%-     endif %}
      retval = ::f1dl::internal::ValidateMessagePayload<
                 internal::{{interface.name}}_{{method.name}}_Params_Data>(
                    message, err);
      if (retval != ::f1dl::internal::ValidationError::NONE) {
         FIDL_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface '{{interface.name}}', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return ::f1dl::internal::ValidationError::NONE;
    }
{%-   endfor %}
    default:
      break;
  }

  // Unrecognized message.
  FIDL_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'{{interface.name}}'";
  ReportValidationError(
      ::f1dl::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return ::f1dl::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}

{#--- Response validator definitions #}
{%-   if interface|has_callbacks %}
::f1dl::internal::ValidationError {{interface.name}}ResponseValidator::Validate(
    const ::f1dl::Message* message,
    std::string* err) {
  ::f1dl::internal::ValidationError retval;

  retval = ::f1dl::internal::ValidateMessageIsResponse(message, err);
  if (retval != ::f1dl::internal::ValidationError::NONE) {
    FIDL_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface '{{interface.name}}', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  {{base_name}}::MessageOrdinals method_ordinal =
      static_cast<{{base_name}}::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
{%-    for method in interface.methods if method.response_parameters != None %}
    case {{base_name}}::MessageOrdinals::{{method.name}}: {
      retval = ::f1dl::internal::ValidateMessagePayload<
                  internal::{{interface.name}}_{{method.name}}_ResponseParams_Data>(
                      message, err);
      if (retval != ::f1dl::internal::ValidationError::NONE) {
        FIDL_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface '{{interface.name}}',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return ::f1dl::internal::ValidationError::NONE;
    }
{%-    endfor %}
    default:
      break;
  }

  // Unrecognized message.
  FIDL_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'{{interface.name}}'";
  ReportValidationError(
      ::f1dl::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return ::f1dl::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
{%-   endif -%}

{%- endfor %} {# for each interface #}

// --- Enums ---
{%- from "enum_macros.tmpl" import is_valid_enum_def -%}
{%- from "enum_macros.tmpl" import global_enum_operators_def -%}
{%- for enum in enums -%}
  {{is_valid_enum_def(enum, class_name='')}}
  {{global_enum_operators_def(enum, class_name='')}}
{%- endfor %}

// Base interface definitions (Name_, Constants, Enums)
{%- for interface in interfaces %}
{%- set base_name = "internal::%s_Base"|format(interface.name) -%}
{%- if interface.service_name %}
const char {{base_name}}::Name_[] = "{{interface.service_name}}";
{%- endif %}

// Constants
{%-  for constant in interface.constants %}
{%-   if constant.kind|is_numerical_kind %}
constexpr {{constant.kind|cpp_pod_type}} {{base_name}}::{{constant.name}};
{%-   else %}
const {{constant.kind|cpp_pod_type}} {{base_name}}::{{constant.name}} = {{constant|constant_value}};
{%-   endif %}
{%-  endfor %}

// Enums
{%-  for enum in interface.enums %}
  {{is_valid_enum_def(enum, class_name=base_name)}}
  {{global_enum_operators_def(enum, class_name=base_name)}}
{%-  endfor %}
{%- endfor %}

// Struct Constants
{%- for struct in structs %}
{%-   for constant in struct.constants %}
{%-     if constant.kind|is_integral_kind %}
const {{constant.kind|cpp_pod_type}} {{struct.name}}::{{constant.name}};
{%-     else %}
const {{constant.kind|cpp_pod_type}} {{struct.name}}::{{constant.name}} = {{constant|constant_value}};
{%-     endif %}
{%-   endfor %}
{%- endfor %}

// --- Struct builder definitions ---
{%- for struct in structs %}
{%-   include "wrapper_class_definition.tmpl" %}
{%- endfor %}

// --- Union builder definitions ---
{%- for union in unions %}
{%-   include "wrapper_union_class_definition.tmpl" %}
{%- endfor %}

// --- Struct Serialization Helpers ---
{%- for struct in structs %}
{%-   include "struct_serialization_definition.tmpl" %}
{%- endfor %}

// --- Union Serialization Helpers ---
{%- for union in unions %}
{%-   include "union_serialization_definition.tmpl" %}
{%- endfor %}

// --- Structs for interface method parameters ---
{%- for interface in interfaces %}
{%-   for method in interface.methods %}
{%      set struct = method.param_struct %}
{%-     include "wrapper_class_definition.tmpl" %}
{%-     include "struct_serialization_definition.tmpl" %}
{%-     if method.response_parameters != None %}
{%-       set struct = method.response_param_struct %}
{%-       include "wrapper_class_definition.tmpl" %}
{%-       include "struct_serialization_definition.tmpl" %}
{%-     endif %}
{%-   endfor %}
{%- endfor %}

{%- for namespace in namespaces_as_array|reverse %}
}  // namespace {{namespace}}
{%- endfor %}
