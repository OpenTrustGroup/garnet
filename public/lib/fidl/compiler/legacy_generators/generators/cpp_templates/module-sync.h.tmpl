{% import "struct_macros.tmpl" as struct_macros -%}
{% import "interface_macros.tmpl" as interface_macros -%}
{%- set header_guard = "%s_SYNC_H_"|
        format(module.path|upper|replace("/","_")|replace(".","_")|replace("-","_")) -%}

// NOTE: This file was generated by the Mojo bindings generator.
#ifndef {{header_guard}}
#define {{header_guard}}

#include <stdint.h>

#include "lib/fidl/cpp/bindings/array.h"
#include "lib/fidl/cpp/bindings/interface_handle.h"
#include "lib/fidl/cpp/bindings/interface_request.h"
#include "lib/fidl/cpp/bindings/map.h"
#include "lib/fidl/cpp/bindings/message_validator.h"
#include "lib/fidl/cpp/bindings/string.h"
#include "lib/fidl/cpp/bindings/struct_ptr.h"
#include "{{module.path}}-internal.h"
#include "{{module.path}}-common.h"

{%- for import in imports %}
#include "{{import.module.path}}.h"
{%- endfor %}

{% for namespace in namespaces_as_array %}
namespace {{namespace}} {
{%- endfor %}

// --- Synchronous interface declaration ---
{%  for interface in interfaces %}
class {{interface.name}}_SynchronousProxy;
class {{interface.name}}_Synchronous
  : public internal::{{interface.name}}_Base {
 public:
  virtual ~{{interface.name}}_Synchronous() override {}

  using Proxy_ = {{interface.name}}_SynchronousProxy;

{%-   for method in interface.methods %}
  virtual bool {{method.name}}(
      {{interface_macros.declare_sync_request_params(method)}})
      {%- if method.response_parameters == None -%} const {%- endif -%}
      = 0;
{%-   endfor %}
};

class {{interface.name}}_SynchronousProxy
    : public {{interface.name}}_Synchronous {
 public:
  explicit {{interface.name}}_SynchronousProxy(
      ::zx::channel channel,
      ::f1dl::internal::MessageValidatorList&& validators);

  bool is_bound() const { return !!channel_; }
  zx::channel TakeChannel_();

{%-   for method in interface.methods %}
  bool {{method.name}}({{interface_macros.declare_sync_request_params(method)}})
    {%- if method.response_parameters == None %} const {% endif %} override;
{%-   endfor %}

 private:
  ::zx::channel channel_;
  ::f1dl::internal::MessageValidatorList const validators_;
};
{% endfor %}

{%- for namespace in namespaces_as_array|reverse %}
}  // namespace {{namespace}}
{%- endfor %}

#endif  // {{header_guard}}
