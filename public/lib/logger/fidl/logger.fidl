// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library logger;

struct LogFilterOptions {
  bool filter_by_severity;
  int32 min_severity;

  bool filter_by_pid;
  uint64 pid;

  bool filter_by_tid;
  uint64 tid;

  // Return all messages which contains at least one tag.
  // Passed tags should not be more than 63 bytes in length and max tags can be 5.
  // Listener would be discarded if the limit is not followed.
  vector<string>:5 tags;
};

struct LogMessage {
  uint64 pid;
  uint64 tid;
  uint64 time;
  int32 severity;
  uint32 dropped_logs;
  vector<string>:5 tags;
  string msg;
};

// Interface to for LogListener to listen to.
[ServiceName="logger::Log"]
interface Log {
  // Listener listens for logs
  1: Listen(LogListener log_listener, LogFilterOptions? options);
};

// Interface to get and listen to socket from syslogger
[ServiceName="logger::LogSink"]
interface LogSink {
  // Client connects to send logs over socket
  1: Connect(handle<socket> socket);
};


interface LogListener {
  1: Log(LogMessage log);
};
