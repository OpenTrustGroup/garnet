// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.media;

[Discoverable]
interface Audio {
  1: CreateRendererV2(request<AudioRenderer2> audio_renderer);

  // Create an audio capturer which either captures from the current default
  // audio input device, or loops-back from the current default audio output
  // device based on value passed for the the loopback flag.
  //
  // TODO(johngro): Get rid of the loopback flag ASAP.  Routing decisions (and
  // security surrounding routing decisions) should be much more sophisticated
  // than this.  This is just a placeholder until we have a design in place.
  // Eventually, I suspect that all of this will move up into the audio policy
  // manager and application clients will obtain capturers from and control
  // through the policy manager.
  2: CreateCapturer(request<AudioCapturer> audio_capturer, bool loopback);

  // Sets the system-wide gain in decibels. |db| values are clamped to the
  // range -160db to 0db inclusive. Setting gain to -160db implicitly mutes
  // system audio. Setting gain to a higher values when it's already -160db
  // implicitly unmutes system audio. Gain and mute are otherwise independent.
  3: SetSystemGain(float32 gain_db);

  // Sets the system-wide 'muted' value. Changing this value has no effect on
  // the system audio gain value. Calling this method with argument |false|
  // has no effect if system audio gain is set to -160db. Gain and mute are
  // otherwise independent.
  4: SetSystemMute(bool muted);

  // Provides current system gain/mute values.
  5: -> SystemGainMuteChanged(float32 gain_db, bool muted);

  6: SetRoutingPolicy(AudioOutputRoutingPolicy policy);

  // DEPRECATED
  9: CreateRenderer(request<AudioRenderer> audio_renderer,
                    request<MediaRenderer> media_renderer);

};

// A placeholder for various types of simple routing policies.  This should be
// replaced when routing policy moves to a more centralized policy manager.
enum AudioOutputRoutingPolicy {
  // AudioRenderers are always connected to all audio outputs which currently
  // in the plugged state (eg; have a connector attached to them)
  kAllPluggedOutputs = 0;

  // AudioRenderers are only connected to the output stream which most
  // recently entered the plugged state.  Renderers move around from output to
  // output as streams are published/unpublished and become plugged/unplugged.
  //
  // This is the initial setting for audio output routing.
  kLastPluggedOutput = 1;
};
