// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library media;

// import "lib/media/fidl/audio_capturer.fidl";
// import "lib/media/fidl/audio_renderer.fidl";
// import "lib/media/fidl/media_renderer.fidl";

[ServiceName="media::AudioServer"]
interface AudioServer {
  1: CreateRenderer(request<AudioRenderer> audio_renderer, request<MediaRenderer> media_renderer);
  5: CreateRendererV2(request<AudioRenderer2> audio_renderer);

  // Create an audio capturer which either captures from the current default
  // audio input device, or loops-back from the current default audio output
  // device based on value passed for the the loopback flag.
  //
  // TODO(johngro): Get rid of the loopback flag ASAP.  Routing decisions (and
  // security surrounding routing decisions) should be much more sophisticated
  // than this.  This is just a placeholder until we have a design in place.
  // Eventually, I suspect that all of this will move up into the audio policy
  // manager and application clients will obtain capturers from and control
  // through the policy manager.
  2: CreateCapturer(request<AudioCapturer> audio_capturer, bool loopback);

  // Sets the master gain/attenuation of the mixer, expressed in dB.  Master
  // gain is applied to all active outputs.  Legal values are in the range
  // [-inf, 0.0].  Any value less than or equal to the constant
  // kMutedGain will result in all outputs becoming explicitly
  // muted.
  //
  // TODO(johngro): Remove this as soon as we have a policy manager in control
  // of output gain.
  3: SetMasterGain(float32 db_gain);

  // Get the current value of the master gain for the audio service.
  4: GetMasterGain() -> (float32 db_gain);
};
