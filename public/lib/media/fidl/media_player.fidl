// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library media;

// import "lib/media/fidl/audio_renderer.fidl";
// import "lib/media/fidl/media_metadata.fidl";
// import "lib/media/fidl/media_renderer.fidl";
// import "lib/media/fidl/problem.fidl";
// import "lib/media/fidl/seeking_reader.fidl";
// import "lib/media/fidl/timelines.fidl";
// import "lib/ui/geometry/fidl/geometry.fidl";
// import "lib/ui/views/fidl/view_manager.fidl";
// import "lib/ui/views/fidl/view_token.fidl";

// Plays media.
[ServiceName="media::MediaPlayer"]
interface MediaPlayer {
  // Sets an HTTP URL to read from.
  1: SetHttpSource(string http_url);

  // Sets a file channel to read from.
  2: SetFileSource(handle<channel> file_channel);

  // Sets a reader to read from.
  3: SetReaderSource(SeekingReader? reader);

  // Starts playback.
  4: Play();

  // Pauses playback.
  5: Pause();

  // Seeks to the specified position, specified in nanoseconds.
  6: Seek(int64 position);

  // Gets the status. To get the status immediately, call
  // GetStatus(kInitialStatus). To get updates thereafter, pass the version
  // sent in the previous callback.
  7: GetStatus(uint64 version_last_seen)
      -> (uint64 version, MediaPlayerStatus @status);

  // See AudioRenderer.SetGain.
  8: SetGain(float32 db_gain);

  // Creates a video view.
  9: CreateView(views_v1.ViewManager view_manager, request<views_v1_token.ViewOwner> view_owner);

  // DEPRECATED. Used only for testing.
  // TODO(dalesat): Remove when we can test with dependency injection.
  // Sets the audio renderer to use. The audio renderer can only be set on a
  // new player for which none of the SetXxxSource methods or SetAudioRenderer
  // itself have been called. This method is ignored otherwise. If the
  // audio_renderer parameter is null, the SetGain method does nothing.
  10: SetAudioRenderer(AudioRenderer? audio_renderer, MediaRenderer media_renderer);

  // Adds a new binding to this MediaPlayer.
  11: AddBinding(request<MediaPlayer> media_player);
};

// MediaPlayer status information.
struct MediaPlayerStatus {
  // Transform translating local time to presentation time. Reverse translation
  // (presentation time to local time) is only valid when media is playing.
  TimelineTransform? timeline_transform;

  // Indicates whether presentation has reached end-of-stream.
  bool end_of_stream;

  // Whether the current content has an audio stream.
  bool content_has_audio;

  // Whether the current content has a video stream.
  bool content_has_video;

  // Indicates whether an audio stream is currently connected for rendering.
  // This value will be false if |content_has_audio| is false, if no audio
  // renderer was provided, or if the audio media type isn't supported.
  bool audio_connected;

  // Indicates whether a video stream is currently connected for rendering.
  // This value will be false if |content_has_video| is false, if no video
  // renderer was provided, or if the video media type isn't supported.
  bool video_connected;

  // Size of the video currently being displayed.
  geometry.Size? video_size;

  // Relative dimensions of a video pixel.
  geometry.Size? pixel_aspect_ratio;

  // Describes the media.
  MediaMetadata? metadata;

  // Indicates a problem preventing intended operation.
  Problem? problem;
};
