// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library media_player;

using media;

// Produces media streams delivered from a specified origin.
interface MediaSource {
  // Describes the source.
  1: Describe() -> (vector<media.MediaType> stream_types);

  // Gets the packet producer for the specified stream.
  2: GetPacketProducer(uint32 stream_index, request<media.MediaPacketProducer> packet_producer);

  // Gets the status. To get the status immediately, call
  // GetStatus(kInitialStatus). To get updates thereafter, pass the version
  // sent in the previous callback.
  3: GetStatus(uint64 version_last_seen)
      -> (uint64 version, MediaSourceStatus @status);

  // Flushes the source and downstream components. |hold_frame| indicates
  // whether a video renderer (if any) should continue to display the last
  // displayed frame.
  4: Flush(bool hold_frame) -> ();

  // Seeks to the specified position, specified in nanoseconds.
  5: Seek(int64 position) -> ();
};

// Describes the status of the media source.
struct MediaSourceStatus {
  // Indicates whether an audio stream producer is currently connected. This
  // value will be false if the content contains no audio or if no audio stream
  // producer is connected (possibly because the audio stream media type isn't
  // supported).
  bool audio_connected;

  // Indicates whether a video stream producer is currently connected. This
  // value will be false if the content contains no video or if no video stream
  // producer is connected (possibly because the video stream media type isn't
  // supported).
  bool video_connected;

  // Describes the media.
  MediaMetadata? metadata;

  // Indicates a problem preventing intended operation.
  Problem? problem;
};
