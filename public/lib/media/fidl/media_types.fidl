// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.media;

const string kMediaEncodingUnsupported = "unsupported";

const string kAudioEncodingAac = "aac";
const string kAudioEncodingAmrNb = "amrnb";
const string kAudioEncodingAmrWb = "amrwb";
const string kAudioEncodingFlac = "flac";
const string kAudioEncodingGsmMs = "gsmms";
const string kAudioEncodingLpcm = "lpcm";
const string kAudioEncodingMp3 = "mp3";
const string kAudioEncodingPcmALaw = "pcmalaw";
const string kAudioEncodingPcmMuLaw = "pcmmulaw";
const string kAudioEncodingVorbis = "vorbis";

const string kVideoEncodingH263 = "h263";
const string kVideoEncodingH264 = "h264";
const string kVideoEncodingMpeg4 = "mpeg4";
const string kVideoEncodingTheora = "theora";
const string kVideoEncodingUncompressed = "uncompressed_video";
const string kVideoEncodingVp3 = "vp3";
const string kVideoEncodingVp8 = "vp8";
const string kVideoEncodingVp9 = "vp9";

// Special value for GetStatus version_last_seen parameter to get the current
// status immediately.
const uint64 kInitialStatus = 0;

// Describes the type of media.
struct MediaType {
  // Identifies the type’s medium.
  MediaTypeMedium medium;

  // Medium-dependent details.
  MediaTypeDetails details;

  // Encoding.
  string encoding;

  // Encoding-specific parameters.
  vector<uint8>? encoding_parameters;
};

// Describes a set of types of media.
struct MediaTypeSet {
  // Identifies the types’ medium.
  MediaTypeMedium medium;

  // Medium-dependent details.
  MediaTypeSetDetails details;

  // Included encodings.
  vector<string> encodings;
};

// Medium values for MediaType
enum MediaTypeMedium {
  AUDIO = 0;
  VIDEO = 1;
  TEXT = 2;
  SUBPICTURE = 3;
};

// A union of all media type details.
union MediaTypeDetails {
  AudioMediaTypeDetails audio;
  VideoMediaTypeDetails video;
  TextMediaTypeDetails text;
  SubpictureMediaTypeDetails subpicture;
};

// A union of all media type set details.
union MediaTypeSetDetails {
  AudioMediaTypeSetDetails audio;
  VideoMediaTypeSetDetails video;
  TextMediaTypeSetDetails text;
  SubpictureMediaTypeSetDetails subpicture;
};

// Media type details for the AUDIO medium.
struct AudioMediaTypeDetails {
  AudioSampleFormat sample_format;
  uint32 channels;
  uint32 frames_per_second;
  // TODO(dalesat): Channel designations.
};

const uint32 kMinLpcmChannelCount = 1;
const uint32 kMaxLpcmChannelCount = 8;
const uint32 kMinLpcmFramesPerSecond = 1000;
const uint32 kMaxLpcmFramesPerSecond = 192000;

const uint32 kMinChannelCount = 1;
const uint32 kMaxChannelCount = 8;
const uint32 kMinFramesPerSecond = 1000;
const uint32 kMaxFramesPerSecond = 192000;

struct AudioPcmFormat {
  AudioSampleFormat sample_format;
  uint32 channels;
  uint32 frames_per_second;
  // TODO(johngro): Channel/Speaker designations.
  // TODO(johngro): Weighting (Linear, A-law, Mu-law, etc...)
};

// Media type set details for the AUDIO medium.
struct AudioMediaTypeSetDetails {
  AudioSampleFormat sample_format;
  uint32 min_channels;
  uint32 max_channels;
  uint32 min_frames_per_second;
  uint32 max_frames_per_second;
};

enum AudioSampleFormat {
  // Indicates no sample format.
  NONE = 0;

  // Indicates any sample format.
  ANY = 1;

  // 8-bit unsigned samples, sample size 1 byte.
  UNSIGNED_8 = 2;

  // 16-bit signed samples, host-endian, sample size 2 bytes.
  SIGNED_16 = 3;

  // 24-bit signed samples in 32 bits, host-endian, sample size 4 bytes.
  // TODO(johngro): describe the packing for this
  SIGNED_24_IN_32 = 4;

  // 32-bit floating-point samples, sample size 4 bytes.
  FLOAT = 5;
};

// Media type details for the VIDEO medium.
// TODO(dalesat): Refine and document.
struct VideoMediaTypeDetails {
  VideoProfile profile;
  PixelFormat pixel_format;
  ColorSpace color_space;
  uint32 width;
  uint32 height;
  uint32 coded_width;
  uint32 coded_height;
  uint32 pixel_aspect_ratio_width;
  uint32 pixel_aspect_ratio_height;
  vector<uint32> line_stride;
  vector<uint32> plane_offset;
};

// Media type set details for the VIDEO medium.
// TODO(dalesat): Expand and document.
struct VideoMediaTypeSetDetails {
  uint32 min_width;
  uint32 max_width;
  uint32 min_height;
  uint32 max_height;
};

// Video profiles.
// TODO(dalesat): Blindly copied from Chromium, revisit.
enum VideoProfile {
  UNKNOWN = 0;
  NOT_APPLICABLE = 1;
  H264_BASELINE = 2;
  H264_MAIN = 3;
  H264_EXTENDED = 4;
  H264_HIGH = 5;
  H264_HIGH10 = 6;
  H264_HIGH422 = 7;
  H264_HIGH444_PREDICTIVE = 8;
  H264_SCALABLE_BASELINE = 9;
  H264_SCALABLE_HIGH = 10;
  H264_STEREO_HIGH = 11;
  H264_MULTIVIEW_HIGH = 12;
};

// Pixel format.
// TODO(dalesat): Blindly copied from Chromium, revisit.
enum PixelFormat {
  UNKNOWN = 0;
  I420 = 1;  // 12bpp YUV planar 1x1 Y, 2x2 UV samples, a.k.a. YU12.
  YV12 = 2;  // 12bpp YVU planar 1x1 Y, 2x2 VU samples.
  YV16 = 3;  // 16bpp YVU planar 1x1 Y, 2x1 VU samples.
  YV12A = 4;  // 20bpp YUVA planar 1x1 Y, 2x2 VU, 1x1 A samples.
  YV24 = 5;  // 24bpp YUV planar, no subsampling.
  NV12 = 6;  // 12bpp with Y plane followed by a 2x2 interleaved UV plane.
  NV21 = 7;  // 12bpp with Y plane followed by a 2x2 interleaved VU plane.
  UYVY = 8;  // 16bpp interleaved 2x1 U, 1x1 Y, 2x1 V, 1x1 Y samples.
  YUY2 = 9;  // 16bpp interleaved 1x1 Y, 2x1 U, 1x1 Y, 2x1 V samples.
  ARGB = 10;  // 32bpp ARGB, 1 plane.
  XRGB = 11;  // 24bpp XRGB, 1 plane.
  RGB24 = 12;  // 24bpp BGR, 1 plane.
  RGB32 = 13;  // 32bpp BGRA, 1 plane.
  MJPEG = 14;  // MJPEG compressed.
  MT21 = 15;
};

// Pixel format.
// TODO(dalesat): Blindly copied from Chromium, revisit.
enum ColorSpace {
  UNKNOWN = 0;
  NOT_APPLICABLE = 1;
  JPEG = 2;
  HD_REC709 = 3;
  SD_REC601 = 4;
};

// Media type details for the TEXT medium.
// TODO(dalesat): Define.
struct TextMediaTypeDetails {
  uint8 dummy;
};

// Media type set details for the TEXT medium.
// TODO(dalesat): Define.
struct TextMediaTypeSetDetails {
  uint8 dummy;
};

// Media type details for the SUBPICTURE medium.
// TODO(dalesat): Define.
struct SubpictureMediaTypeDetails {
  uint8 dummy;
};

// Media type set details for the SUBPICTURE medium.
// TODO(dalesat): Define.
struct SubpictureMediaTypeSetDetails {
  uint8 dummy;
};
