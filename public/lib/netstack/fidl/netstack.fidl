// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module netstack;

import "lib/netstack/fidl/net_address.fidl";

enum Protocol {
  UNSPECIFIED,
  UDP,
  TCP,
};

enum Status {
  OK,
  UNKNOWN_ERROR,
  DNS_ERROR,
  PARSE_ERROR,
  IPV4_ONLY,
};

struct NetErr {
  Status status;
  string message;
};

struct NetTrafficStats {
  // See network interface stats in Linux for future ideas:
  // https://chromium.googlesource.com/native_client/linux-headers-for-nacl/+/2dc04f8190a54defc0d59e693fa6cff3e8a916a9/include/linux/if_link.h#7

  uint64 pkts_total;
  uint64 pkts_echo_req;	    // request
  uint64 pkts_echo_rep;	    // reply
  uint64 pkts_echo_req_v6;  // request
  uint64 pkts_echo_rep_v6;	// reply

  uint64 bytes_total;
};

struct NetInterfaceStats {
  // Placeholder for all statistics regarding the network interface,
  // including, but not limited to traffic itself.

  int64  up_since;  // Unix epoch.

  NetTrafficStats rx;
  NetTrafficStats tx;
};

struct TcpStats {
  uint64 active_connection_openings;
  uint64 passive_connection_openings;
  uint64 failed_connection_attempts;
  uint64 valid_segments_received;
  uint64 invalid_segments_received;
  uint64 segments_sent;
  uint64 resets_sent;
};

struct UdpStats {
  uint64 packets_received;
  uint64 unknown_port_errors;
  uint64 receive_buffer_errors;
  uint64 malformed_packets_received;
  uint64 packets_sent;
};

// Mirrors tcpip.Stats in third_party/netstack/tcpip/tcpip.go.
struct AggregateStats {
  uint64 unknown_protocol_received_packets;
  uint64 unknown_network_endpoint_received_packets;
  uint64 malformed_received_packets;
  uint64 dropped_packets;
  TcpStats tcp_stats;
  UdpStats udp_stats;
};

// https://linux.die.net/man/7/netdevice
struct NetInterface {
  uint32 id;
  uint32 flags;
  string name;
  NetAddress addr;
  NetAddress netmask;
  NetAddress broadaddr;
  array<Subnet> ipv6addrs;
  array<uint8> hwaddr;
};

// Flags for NetInterface.flags.
const uint32 NetInterfaceFlagUp = 0x1;  // Set if the interface is up.

struct RouteTableEntry {
  NetAddress destination;
  NetAddress netmask;
  NetAddress gateway;
  uint32 nicid;
};

interface NotificationListener {
  // Called by the netstack when one or more interfaces or their properties change.
  // TODO: include only the interface(s) that have changed?
  OnInterfacesChanged@0(array<NetInterface> interfaces);
};

[ServiceName="netstack::Netstack"]
interface Netstack {
  // Registers the given NotificationListener to be notified of changes. Only one
  // NotificationListener may be active for each client's Netstack instance.
  RegisterListener@0(NotificationListener? listener);

  // Finds the port number from a given service name and protocol. [service] can be a
  // number like "42", or a service name like "http". If [protocol] is UNSPECIFIED,
  // the service is checked for TCP first, then UDP.
  GetPortForService@1(string service, Protocol protocol) => (uint16 port);

  // Finds the IP address for a given host name and port. This may issue network
  // requests via DNS to look up domain names. E.g.
  // GetAddress("example.com", 80) => [{142.42.42.1}]
  GetAddress@2(string address, uint16 port) => (array<SocketAddress> addresses, NetErr err);

  // Returns the list of registered network interfaces.
  GetInterfaces@3() => (array<NetInterface> interfaces);

  // Returns the netstack's node name.
  GetNodeName@4() => (string node_name);

  GetRouteTable@5() => (array<RouteTableEntry> rt);

  // TODO (porce): Separate interfaces.
  GetStats@6(uint32 nicid) => (NetInterfaceStats stats);

  // Get stats for all NICs on the stack.
  GetAggregateStats@7() => (AggregateStats stats);

  // Sets the status (up or down) for the interface with the given nicid.
  SetInterfaceStatus@8(uint32 nicid, bool enabled);

  SetRouteTable@9(array<RouteTableEntry> rt);

  // Sets the address for the interface with the given nicid.
  // Masks off addr.PrefixLen bits from addr.Addr to set the subnet.
  // TODO: prefix length is 64-bit to work around TO-830.
  // Change the argument type once FIDL2 migration is complete.
  SetInterfaceAddress@10(uint32 nicid, NetAddress addr, uint64 prefixLen) => (NetErr result);
};
