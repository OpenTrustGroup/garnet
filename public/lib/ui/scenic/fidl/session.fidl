// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module scenic;

import "lib/ui/scenic/fidl/ops.fidl";
import "lib/ui/scenic/fidl/presentation_info.fidl";
import "lib/ui/scenic/fidl/types.fidl";

interface Session {
  // Enqueue a list of operations, which will not take effect until Present() is
  // called.  It is allowable to call Enqueue() several times before calling
  // Present(); the effect is the same as if all operations had been
  // concatenated into a single Enqueue() call.
  Enqueue@0(array<Op> op);

  // Present all previously enqueued operations.  In order to pipeline the
  // preparation of the resources required to render the scene, two lists of
  // fences (implemented as events) are passed.
  //
  // SCHEDULING PRESENTATION
  //
  // |presentation_time| specifies the time on or after which the
  // client would like the enqueued operations should take visible effect
  // (light up pixels on the screen), expressed in nanoseconds in the
  // |CLOCK_MONOTONIC| timebase.  Desired presentation times must be
  // monotonically non-decreasing.
  //
  // Using a desired presentation time in the present or past (such as 0)
  // schedules enqueued operations to take visible effect as soon as possible
  // (during the next frame to be prepared).
  //
  // Using a desired presentation time in the future schedules the enqueued
  // operations to take visible effect as closely as possible to or after
  // the stated time (but no earlier).
  //
  // Each rendered frame has a target presentation time.  Before rendering
  // a frame, the scene manager applies all enqueued operations associated
  // with all prior calls to |Present()| whose desired presentation time
  // is on or before the frame's target presentation time.
  //
  // The |Present()| method does not return until the scene manager begins
  // preparing the first frame which includes its presented content.
  // Upon return, the |PresentationInfo| provides timing information for the
  // frame which includes the presented content.
  //
  // To present new content on each successive frame, wait for |Present()|
  // to return before calling |Present()| again with content for the next
  // frame.
  //
  // It is also possible to enqueue and present successive frames of content
  // all at once with increasing desired presentation times, incrementing by
  // |PresentationInfo.presentation_interval| for each one.
  //
  // Animation updates are also coordinated in terms of presentation time.
  //
  // TODO(jeffbrown): Defining presentation time in terms of |CLOCK_MONOTONIC|
  // simplifies synchronization across subsystems but it might be too simple.
  // We should consider using a synthetic timebase and describing its relation
  // to other clocks separately.  That would make it possible to present
  // content (animations, media, and UI) in "slow mode" simply by varying the
  // timing relation, assuming clients play along.
  //
  // SYNCHRONIZATION
  //
  // |acquire_fences| are used by Mozart to wait until all of the session's
  // resources are ready to render (or to allow downstream components, such as
  // the Vulkan driver, to wait for these resources).
  //
  // For example, Fuchsia's Vulkan driver allows an zx::event to be obtained
  // from a VkSemaphore.  This allows a Mozart client to submit a Vulkan command
  // buffer to generate images/meshes/etc., and instructing Vulkan to signal a
  // VkSemaphore when it is done.  By inserting the zx::event corresponding to
  // this semaphore into |acquire_fences|, the client allows Mozart to submit work
  // to the Vulkan driver without waiting on the CPU for the event to be
  // signalled.
  //
  // |release_fences| is a list of events that will be signalled by Mozart when
  // the updated session state has been fully committed: future frames will be
  // rendered using this state, and all frames generated using previous session
  // states have been fully-rendered and presented to the display.
  //
  // Together, |acquire_fences| and |release_fences| are intended to allow clients
  // to implement strategies such as double-buffering.  For example, a client
  // might do the following:
  //   1) create two Image with resource IDs #1 and #2.
  //   2) create two Materials with resource IDs #3 and #4, which respectively
  //      use Images #1 and #2 as their texture.
  //   3) create a tree of Nodes and attach them to the scene.
  //   4) set one of the nodes above, say #5, to use Material #3.
  //   5) submit a Vulkan command-buffer which renders into Image #1, and
  //      will signal a VkSemaphore.
  //   6) call Present() with one acquire-fence (obtained from the VkSemaphore
  //      above) and one newly-created release-fence.
  //
  // After the steps above, Mozart will use the committed session state to render
  // frames whenever necessary.  When the client wants to display something
  // different than Image #1, it would do something similar to steps 4) to 6):
  //   7) set Node #5 to use Material #4.
  //   8) submit a Vulkan command-buffer which renders into Image #1, and
  //      will signal a VkSemaphore.
  //   9) call Present() with one acquire-fence (obtained from the VkSemaphore
  //      above) and one newly-created release-fence.
  //
  // Finally, to continually draw new content, the client could repeat steps
  // 4) to 9), with one important difference: step 5) must wait on the event
  // signalled by step 9).  Otherwise, it might render into Image #1 while that
  // image is still being used by Mozart to render a frame.  Similarly, step 8)
  // must wait on the event signalled by step 6).
  //
  // The scenario described above uses one acquire-fence and one release-fence,
  // but it is easy to imagine cases that require more.  For example, in addition
  // to using Vulkan to render into Images #1 and #2, the client might also
  // upload other resources to Vulkan on a different VkQueue, which would
  // would signal a separate semaphore, and therefore require an additional
  // acquire-fence.
  //
  // Note: |acquire_fences| and |release_fences| are only necessary to synchronize
  // access to memory (and other external resources).  Any modification to
  // resources made via the Session API are automatically synchronized.
  //
  // TODO(MZ-400): document invariants that apply to |presentation_info|.  Is it
  // strong enough to guarantee that receiving the response means that all
  // previously-enqueued Ops have been applied?  Or does it need to be stronger,
  // e.g. that all frames based on previous presentations are completely done,
  // and subsequent frames will be rendered based on the most recent presented
  // content?
  Present@1(uint64 presentation_time,
      array<handle<event>> acquire_fences, array<handle<event>> release_fences) =>
      (PresentationInfo presentation_info);

  // Performs a hit test along the specified ray.
  //
  // Returns a list of intersections of tagged nodes between the ray
  // and the geometry of the subtree of nodes at |node_id|.  Results are
  // sorted by increasing distance from the ray's origin.  Nodes which are
  // hit at the same distance are sorted by the sequence they would appear
  // in a post-order tree traversal of the scene.  Equivalently, the
  // results are ordered by decreasing hit specificity.
  //
  // The session must associate a tag with any nodes it would like to
  // observe in the result set.  Untagged nodes are still considered in
  // hit tests and may cause hits to be reported for containing nodes
  // which are tagged.
  //
  // The hit test only considers the currently presented content at
  // the time of the request.  This means that content pending presentation
  // may not be considered for hit testing until the scene manager begins
  // preparing a frame which includes it.
  //
  // |ray_origin| is a point in the node's local coordinate system
  // from which the hit test ray originates.
  //
  // |ray_direction| is a vector in the node's local coordinate system
  // which expresses how the ray propagates from the origin.  It must
  // be non-zero (otherwise nothing will be hit) but it does not need
  // to be normalized.
  //
  // Returns a null hit array if |node_id| is unknown or not a node.
  HitTest@2(uint32 node_id, vec3 ray_origin, vec3 ray_direction) =>
      (array<Hit>? hits);

  // TODO(MZ-404): This API is not finalized and should not be used outside of
  // Mozart (i.e. ViewManager/RootPresenter) until remaining issues are sorted
  // out.
  //
  // Performs a hit test along the provided ray, into the layer stack of
  // the engine's first compositor.
  //
  // Returns a list of intersections of tagged nodes between the ray
  // and the geometry of the subtree of nodes at |node_id|.  Results are
  // sorted by increasing distance from the ray's origin.  Nodes which are
  // hit at the same distance are sorted by the sequence they would appear
  // in a post-order tree traversal of the scene.  Equivalently, the
  // results are ordered by decreasing hit specificity.
  //
  // The session must associate a tag with any nodes it would like to
  // observe in the result set.  Untagged nodes are still considered in
  // hit tests and may cause hits to be reported for containing nodes
  // which are tagged.
  //
  // The hit test only considers the currently presented content at
  // the time of the request.  This means that content pending presentation
  // may not be considered for hit testing until the scene manager begins
  // preparing a frame which includes it.
  //
  // Returns a null hit array if |node_id| is unknown or not a node.
  //
  // The |ray_origin| is expected to be in physical screen coordinates.
  HitTestDeviceRay@3(vec3 ray_origin, vec3 ray_direction) =>
      (array<Hit>? hits);
};

// Describes where a hit occurred within the content of a node tagged
// by this session.
//
// To compute the point of intersection within the node's local coordinate
// system, perform the following calculation using the ray which was
// originally passed to |Session.HitTest()|.
//
//   hit_point = ray.origin + (hit.distance * ray.direction)
//   local_point = hit.inverse_transform * hit_point
struct Hit {
  // The node's tag value.
  uint32 tag_value;

  // The origin of the ray that was used for the hit test, in the hit
  // node's coordinate system.
  vec4 ray_origin;

  // The direction of the ray that was used for the hit test, in the hit
  // node's coordinate system.
  vec4 ray_direction;

  // The inverse transformation matrix which maps the coordinate system of
  // the node at which the hit test was initiated into the local coordinate
  // system of the node which was hit.
  mat4 inverse_transform;

  // The distance from the ray's origin to the closest point of intersection
  // in multiples of the ray's direction vector.
  float distance;
};

// Listens for events which occur within the session.
interface SessionListener {
  // Called when an error has occurred and the session will be torn down.
  OnError@0(string error);

  // Called to deliver a batch of one or more events to the listener.
  // Use |SetEventMaskOp| to enable event delivery for a resource.
  OnEvent@1(array<Event> events);
};
