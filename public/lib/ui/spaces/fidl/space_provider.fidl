// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library spaces;

// SpaceProvider is the standard mechanism for two modules to each obtain half
// of a shared eventpair token.  The shared token is a capability allowing the
// modules to ask Scenic to create a SpaceHolder/Space pair.  The resulting
// Space and SpaceHolder are linked together until either one is destroyed.
//
// Modules are free to use any other mechanism to agree upon the shared
// eventpair token, and use this to create the linked SpaceHolder/Space.
// SpaceProvider is given for the convienience of clients that don't require
// a more complex implementation.
[ServiceName = "spaces::SpaceProvider"]
interface SpaceProvider {
  // Creates a new Space under the control of the SpaceProvider.
  //
  // |token| is one half of the shared eventpair which will bind the new Space
  // to its associated SpaceHolder.  The SpaceProvider will use |token| to
  // create its internal Space representation.  The caller is expected to use
  // its half to create corresponding SpaceHolder object.
  //
  // |incoming_services| allows clients to request services from the
  // SpaceProvider implementation.  |outgoing_services| allows clients to
  // provide services of their own to the SpaceProvider implementaion.
  //
  // Clients can embed a SpaceHolder (and by proxy the paired Space) into their
  // scene graph by using |Node.AddChild()|.  The SpaceHolder cannot itself
  // have any children. A SpaceProvider implementation can nest scene objects
  // within its Space by using |Space.AddChild()|.  The Space itself
  // cannot be a child of anything.
  //
  // Modules can use these mechanisms to establish a distributed,
  // inter-process scene graph.
  1: CreateSpace(handle<eventpair> token,
                 request<component.ServiceProvider>? incoming_services,
                 component.ServiceProvider outgoing_services);
};
