// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module wlan;

// Stub types for communicating between the wlan service and the MLME drivers. Based on the 802.11
// MLME SAP interface (IEEE Std 802.11-2016 section 6.3).


// MLME-SCAN.request (IEEE Std 802.11-2016 6.3.3.2)

enum BSSTypes {
    INFRASTRUCTURE,
    PERSONAL,
    INDEPENDENT,
    MESH,
    ANY_BSS,
    LAST = ANY_BSS,
};

enum ScanTypes {
    ACTIVE,
    PASSIVE,
    LAST = PASSIVE,
};

// LINT analyzer keyword intended for humans:
// LINT.IfChange
enum CBW {	// Channel Bandwidth
    CBW20 = 0,
    CBW40 = 1,
    CBW40ABOVE = CBW40,
    CBW40BELOW = 2,
    CBW80 = 3,
    CBW160 = 4,
    CBW80P80 = 5,

    CBW_COUNT = 6,
};

struct WlanChan {
    uint8 primary;
    CBW cbw;
    uint8 secondary80;
};
// LINT.ThenChange(//garnet/lib/wlan/protocol/include/wlan/protocol/mac.h)

struct ScanRequest {
    BSSTypes bss_type;
    array<uint8, 6> bssid;
    string ssid;
    ScanTypes scan_type;
    uint32 probe_delay;
    array<uint8>? channel_list;
    uint32 min_channel_time;
    uint32 max_channel_time;
    // RequestInformation
    array<string>? ssid_list;
    // ChannelUsage
    // AccessNetworkType
    // HESSID
    // Mesh ID
    // DiscoveryMode
    // VendorSpecificInfo
};


// MLME-SCAN.confirm (IEEE Std 802.11-2016 6.3.3.3)

struct BSSDescription {
    array<uint8, 6> bssid;
    string ssid;
    BSSTypes bss_type;
    uint32 beacon_period;
    uint32 dtim_period;
    uint64 timestamp;
    uint64 local_time;
    array<uint8>? rsn;

    WlanChan chan;

    // For the following measurements, 255 means measurement not available.
    uint8 rssi_measurement;  // not in the standard
    uint8 rcpi_measurement;
    uint8 rsni_measurement;
    // etc
};

enum ScanResultCodes {
    SUCCESS,
    NOT_SUPPORTED,
    LAST = NOT_SUPPORTED,
};

struct ScanResponse {
    array<BSSDescription> bss_description_set;
    // BSSDescriptionFromMeasurementPilotSet
    ScanResultCodes result_code;
};

// MLME-JOIN.request (IEEE Std 802.11-2016, 6.3.4.2)

struct JoinRequest {
    BSSDescription selected_bss;
    uint32 join_failure_timeout;
    uint32 nav_sync_delay;
    array<uint16> op_rate_set;

    // etc
};

// MLME-JOIN.confirm (IEEE Std 802.11-2016, 6.3.4.3)

enum JoinResultCodes {
    SUCCESS,
    JOIN_FAILURE_TIMEOUT,
    LAST = JOIN_FAILURE_TIMEOUT,
};

struct JoinResponse {
    JoinResultCodes result_code;
};

// MLME-AUTHENTICATE.request (IEEE Std 802.11-2016, 6.3.5.2)

enum AuthenticationTypes {
    OPEN_SYSTEM,
    SHARED_KEY,
    FAST_BSS_TRANSITION,
    SAE,
    LAST = SAE,
};

struct AuthenticateRequest {
    array<uint8, 6> peer_sta_address;
    AuthenticationTypes auth_type;
    uint32 auth_failure_timeout;

    // etc
};

// MLME-AUTHENTICATE.confirm (IEEE Std 802.11-2016, 6.3.5.3)

enum AuthenticateResultCodes {
    SUCCESS,
    REFUSED,
    ANTI_CLOGGING_TOKEN_REQUIRED,
    FINITE_CYCLIC_GROUP_NOT_SUPPORTED,
    AUTHENTICATION_REJECTED,
    AUTH_FAILURE_TIMEOUT,
    LAST = AUTH_FAILURE_TIMEOUT,
};

struct AuthenticateResponse {
    array<uint8, 6> peer_sta_address;
    AuthenticationTypes auth_type;
    AuthenticateResultCodes result_code;

    // etc
};

// MLME-DEAUTHENTICATE.request (IEEE Std 802.11-2016, 6.3.6.2)

struct DeauthenticateRequest {
    array <uint8, 6> peer_sta_address;
    // TODO(tkilbourn): define a ReasonCode enum for FIDL
    uint16 reason_code;
    // VendorSpecificInfo
};

// MLME-DEAUTHENTICATE.confirm (IEEE Std 802.11-2016, 6.3.6.3)

struct DeauthenticateResponse {
    array <uint8, 6> peer_sta_address;
};

// MLME-DEAUTHENTICATE.indication (IEEE Std 802.11-2016, 6.3.6.4)

struct DeauthenticateIndication {
    array<uint8, 6> peer_sta_address;
    // TODO(tkilbourn): define a ReasonCode enum for FIDL
    uint16 reason_code;
    // VendorSpecificInfo
};

// MLME-ASSOCIATE.request (IEEE Std 802.11-2016, 6.3.7.2)

struct AssociateRequest {
    array<uint8, 6> peer_sta_address;
    array<uint8>? rsn;

    // etc
};

// MLME-ASSOCIATE.confrm (IEEE Std 802.11-2016, 6.3.7.3)

enum AssociateResultCodes {
    SUCCESS,
    REFUSED_REASON_UNSPECIFIED,
    REFUSED_NOT_AUTHENTICATED,
    REFUSED_CAPABILITIES_MISMATCH,
    REFUSED_EXTERNAL_REASON,
    REFUSED_AP_OUT_OF_MEMORY,
    REFUSED_BASIC_RATES_MISMATCH,
    REJECTED_EMERGENCY_SERVICES_NOT_SUPPORTED,
    REFUSED_TEMPORARILY,
};

struct AssociateResponse {
    AssociateResultCodes result_code;
    // CapabilityInformation
    uint16 association_id;

    // etc
};

// MLME-DISASSOCIATE.request (IEEE Std 802.11-2016, 6.3.9.1)

struct DisassociateRequest {
    array<uint8, 6> peer_sta_address;
    // TODO(tkilbourn): define a ReasonCode enum for FIDL
    uint16 reason_code;
    // VendorSpecificInfo
};

// MLME-DISASSOCIATE.confirm (IEEE Std 802.11-2016, 6.3.9.2)

struct DisassociateResponse {
};

// MLME-DISASSOCIATE.indication (IEEE Std 802.11-2016, 6.3.9.3)

struct DisassociateIndication {
    array<uint8, 6> peer_sta_address;
    // TODO(tkilbourn): define a ReasonCode enum for FIDL
    uint16 reason_code;
    // VendorSpecificInfo
};

// MLME-RESET.request (IEEE Std 802.11-2016, 6.3.10.2)

struct ResetRequest {
    array<uint8, 6> sta_address;
    bool set_default_mib;
};

// MLME-START.request (IEEE Std 802.11-2016, 6.3.11.2)

struct StartRequest {
    string ssid;
    BSSTypes bss_type;
    uint32 beacon_period;
    uint32 dtim_period;

    // TODO(hahnr): Add additional elements.
};

// MLME-START.confirm (IEEE Std 802.11-2016, 6.3.11.3)

enum StartResultCodes {
    SUCCESS,
    BSS_ALREADY_STARTED_OR_JOINED,
    RESET_REQUIRED_BEFORE_START,
    NOT_SUPPORTED,
};

struct StartResponse {
    StartResultCodes result_code;
};

// MLME-STOP.request (IEEE Std 802.11-2016, 6.3.12.2)

struct StopRequest {
    string ssid;
};

// MLME-SETKEYS.request (IEEE Std 802.11-2016 6.3.19.1)


enum KeyType {
    GROUP,
    PAIRWISE,
    PEER_KEY,
    IGTK
};

struct SetKeyDescriptor {
    // Specs specify a bit string, we use byte array.
    array<uint8> key;
    uint16 length;
    uint16 key_id;
    KeyType key_type;
    array<uint8, 6> address;
    array<uint8, 8> rsc;
    array<uint8, 3> cipher_suite_oui;
    uint8 cipher_suite_type;
};

struct SetKeysRequest {
    array<SetKeyDescriptor> keylist;
};

// MLME-DELETEKEYS.request (IEEE Std 802.11-2016 6.3.20.1)

struct DeleteKeyDescriptor {
  uint16 key_id;
  KeyType key_type;
  array<uint8, 6> address;
};

struct DeleteKeysRequest {
  array<DeleteKeyDescriptor> keylist;
};

// MLME-EAPOL.request (IEEE Std 802.11-2016 6.3.22.1)

struct EapolRequest {
    array<uint8, 6> src_addr;
    array<uint8, 6> dst_addr;
    array<uint8> data;
};

// MLME-EAPOL.confirm (IEEE Std 802.11-2016 6.3.22.2)

enum EapolResultCodes {
    SUCCESS,
    TRANSMISSION_FAILURE,
    LAST = TRANSMISSION_FAILURE
};

struct EapolResponse {
    EapolResultCodes result_code;
};

// Method ordinals
// To be replaced once FIDL interfaces are available for Go
enum Method {
    // MLME-SCAN.request
    // Args: ScanRequest
    SCAN_request,

    // MLME-SCAN.confirm
    // Args: ScanResponse
    SCAN_confirm,

    // MLME-JOIN.request
    // Args: JoinRequest
    JOIN_request,

    // MLME-JOIN.confirm
    // Args: JoinResponse
    JOIN_confirm,

    // MLME-AUTHENTICATE.request
    // Args: AuthenticateRequest
    AUTHENTICATE_request,

    // MLME-AUTHENTICATE.confirm
    // Args: AuthenticateResponse
    AUTHENTICATE_confirm,

    // MLME-DEAUTHENTICATE.request
    // Args: DeauthenticateRequest
    DEAUTHENTICATE_request,

    // MLME-DEAUTHENTICATE.confirm
    // Args: DeauthenticateResponse
    DEAUTHENTICATE_confirm,

    // MLME-DEAUTHENTICATE.indication
    // Args: DeauthenticateIndication
    DEAUTHENTICATE_indication,

    // MLME-ASSOCIATE.request
    // Args: AssociateRequest
    ASSOCIATE_request,

    // MLME-ASSOCIATE.confirm
    // Args: AssociateResponse
    ASSOCIATE_confirm,

    // MLME-DISASSOCIATE.request
    // Args: DisassociateRequest
    DISASSOCIATE_request,

    // MLME-DISASSOCIATE.confirm
    // Args: DisassociateResponse
    DISASSOCIATE_confirm,

    // MLME-DISASSOCIATE.indication
    // Args: DisassociateIndication
    DISASSOCIATE_indication,

    // MLME-RESET.request
    // Args: ResetRequest
    RESET_request,

    // MLME-START.request
    // Args: StartRequest
    START_request,

    // MLME-START.confirm
    // Args: StartResponse
    START_confirm,

    // MLME-STOP.request
    // Args: StopRequest
    STOP_request,

    // MLME-STOP.confirm
    // Args: StopResponse
    STOP_confirm,

    // MLME-SETKEYS.request
    // Args: SetKeysRequest
    SETKEYS_request,

    // MLME-DELETEKEYS.request
    // Args: DeleteKeysRequest
    DELETEKEYS_request,

    // MLME-EAPOL.request
    // Args: EapolRequest
    EAPOL_request,

    // MLME-EAPOL.confirm
    // Args: EapolResponse
    EAPOL_confirm,


    // Custom primitives extending 802.11 MLME SAP interface.
    // See: wlan_mlme_ext.fidl

    // Args: SignalReportIndication
    SIGNAL_REPORT_indication,

    // Args: EapolIndication
    EAPOL_indication,

    // Args: DeviceQueryRequest
    DEVICE_QUERY_request,

    // Args: DeviceQueryResponse
    DEVICE_QUERY_confirm,
};
